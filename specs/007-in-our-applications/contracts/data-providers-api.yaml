openapi: 3.0.3
info:
  title: Data Providers API - Enhanced with Input Parameters
  version: 1.1.0
  description: |
    API contract for data provider endpoints with input parameter support.
    This extends the existing data provider API to accept input parameters for dynamic option generation.

servers:
  - url: http://localhost:7071/api
    description: Local development
  - url: https://bifrost-api.azurewebsites.net/api
    description: Production

paths:
  /metadata:
    get:
      summary: Get workflow and data provider metadata
      description: |
        Returns metadata for all registered workflows and data providers,
        including NEW parameter definitions for data providers.
      operationId: getMetadata
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Metadata retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /data-providers/{providerName}:
    post:
      summary: Execute data provider with input parameters
      description: |
        Executes a data provider and returns options. Now supports input parameters
        passed in request body.
      operationId: executeDataProvider
      security:
        - BearerAuth: []
      parameters:
        - name: providerName
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9_]+$'
          description: Data provider name (snake_case)
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataProviderRequest'
      responses:
        '200':
          description: Data provider executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataProviderResponse'
        '400':
          description: Invalid input parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Data provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Data provider execution failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Execute data provider with query parameters
      description: |
        Alternative endpoint for executing data providers with inputs via query parameters.
        Useful for cacheable requests.
      operationId: executeDataProviderGet
      security:
        - BearerAuth: []
      parameters:
        - name: providerName
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9_]+$'
        - name: inputs
          in: query
          required: false
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties:
              type: string
          description: Input parameters as query object (e.g., inputs[token]=abc&inputs[org]=acme)
      responses:
        '200':
          description: Data provider executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataProviderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /forms:
    post:
      summary: Create a new form
      description: |
        Creates a new form. Now validates dataProviderInputs for circular dependencies
        and required parameter coverage.
      operationId: createForm
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFormRequest'
      responses:
        '201':
          description: Form created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormResponse'
        '400':
          description: Validation error (including circular dependencies)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /forms/{formId}:
    put:
      summary: Update an existing form
      description: |
        Updates a form. Validates dataProviderInputs for circular dependencies.
      operationId: updateForm
      security:
        - BearerAuth: []
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFormRequest'
      responses:
        '200':
          description: Form updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # NEW: Data provider input configuration
    DataProviderInputMode:
      type: string
      enum: [static, fieldRef, expression]
      description: |
        Configuration mode for data provider input:
        - static: Use a fixed value
        - fieldRef: Reference another form field
        - expression: Use a JavaScript expression

    DataProviderInputConfig:
      type: object
      required:
        - mode
      properties:
        mode:
          $ref: '#/components/schemas/DataProviderInputMode'
        value:
          type: string
          nullable: true
          description: Static value (set when mode=static)
        fieldName:
          type: string
          nullable: true
          description: Referenced field name (set when mode=fieldRef)
        expression:
          type: string
          nullable: true
          description: JavaScript expression (set when mode=expression)
      description: |
        Configuration for a single data provider input parameter.
        Exactly one of {value, fieldName, expression} must be set based on mode.

    # EXTENDED: FormField with dataProviderInputs
    FormField:
      type: object
      required:
        - name
        - label
        - type
      properties:
        name:
          type: string
          pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$'
        label:
          type: string
        type:
          type: string
          enum: [text, email, number, select, checkbox, textarea, radio, datetime, markdown, html, file]
        required:
          type: boolean
          default: false
        validation:
          type: object
          nullable: true
        dataProvider:
          type: string
          nullable: true
          description: Data provider name for dynamic options
        dataProviderInputs:
          type: object
          nullable: true
          additionalProperties:
            $ref: '#/components/schemas/DataProviderInputConfig'
          description: |
            NEW: Input configurations for data provider parameters.
            Keys are parameter names, values are configurations.
        defaultValue:
          nullable: true
        visibilityExpression:
          type: string
          nullable: true

    # EXTENDED: WorkflowParameter (now shared with data providers)
    WorkflowParameter:
      type: object
      required:
        - name
        - type
        - required
      properties:
        name:
          type: string
        type:
          type: string
          enum: [string, int, bool, float, json, list, email]
        required:
          type: boolean
        label:
          type: string
          nullable: true
        dataProvider:
          type: string
          nullable: true
        defaultValue:
          nullable: true
        helpText:
          type: string
          nullable: true
        validation:
          type: object
          nullable: true
        description:
          type: string
          nullable: true

    # EXTENDED: DataProviderMetadata with parameters
    DataProviderMetadata:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
          default: General
        cacheTtlSeconds:
          type: integer
          default: 300
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowParameter'
          description: |
            NEW: Parameter definitions for this data provider.
            Populated from @param decorators.

    # EXTENDED: DataProviderRequest with inputs
    DataProviderRequest:
      type: object
      properties:
        orgId:
          type: string
          nullable: true
          description: Organization ID for org-scoped providers
        inputs:
          type: object
          nullable: true
          additionalProperties: true
          description: |
            NEW: Input parameter values for data provider.
            Keys are parameter names, values are parameter values.

    DataProviderResponse:
      type: object
      required:
        - provider
        - options
        - cached
        - cacheExpiresAt
      properties:
        provider:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/DataProviderOption'
        cached:
          type: boolean
        cacheExpiresAt:
          type: string
          format: date-time

    DataProviderOption:
      type: object
      required:
        - label
        - value
      properties:
        label:
          type: string
        value:
          type: string
        metadata:
          type: object
          nullable: true

    MetadataResponse:
      type: object
      required:
        - workflows
        - dataProviders
      properties:
        workflows:
          type: array
          items:
            type: object
        dataProviders:
          type: array
          items:
            $ref: '#/components/schemas/DataProviderMetadata'

    CreateFormRequest:
      type: object
      required:
        - name
        - description
        - schema
      properties:
        name:
          type: string
        description:
          type: string
        orgId:
          type: string
          nullable: true
        schema:
          type: object
          required:
            - fields
          properties:
            fields:
              type: array
              items:
                $ref: '#/components/schemas/FormField'
              maxItems: 50

    UpdateFormRequest:
      type: object
      required:
        - name
        - description
        - schema
      properties:
        name:
          type: string
        description:
          type: string
        schema:
          type: object
          required:
            - fields
          properties:
            fields:
              type: array
              items:
                $ref: '#/components/schemas/FormField'
              maxItems: 50

    FormResponse:
      type: object
      required:
        - formId
        - name
        - description
        - schema
      properties:
        formId:
          type: string
        name:
          type: string
        description:
          type: string
        orgId:
          type: string
          nullable: true
        schema:
          type: object
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string

    ValidationError:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: "Validation failed"
        message:
          type: string
          example: "Circular dependency detected: field_a → field_b → field_a"
        details:
          type: object
          nullable: true
          description: Additional validation error details
          properties:
            field:
              type: string
            cycle:
              type: array
              items:
                type: string
            missingParams:
              type: array
              items:
                type: string

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
