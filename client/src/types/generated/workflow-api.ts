/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/registry/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get workflow metadata
         * @description Get all registered workflows and data providers
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Workflow and data provider metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MetadataResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflowName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute workflow
         * @description Execute a workflow with parameters
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    workflowName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["WorkflowExecutionRequest"];
                };
            };
            responses: {
                /** @description Workflow executed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WorkflowExecutionResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data-providers/{providerName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get data provider options
         * @description Call a data provider and get options
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    providerName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Provider options */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DataProviderResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        MetadataResponse: {
            workflows?: components["schemas"]["WorkflowMetadata"][];
            dataProviders?: components["schemas"]["DataProviderMetadata"][];
        };
        WorkflowMetadata: {
            name?: string;
            description?: string;
            category?: string;
            tags?: string[];
            parameters?: components["schemas"]["WorkflowParameter"][];
        };
        WorkflowParameter: {
            name?: string;
            type?: string;
            required?: boolean;
            label?: string;
            helpText?: string;
            defaultValue?: unknown;
            dataProvider?: string;
        };
        DataProviderMetadata: {
            name?: string;
            description?: string;
            category?: string;
        };
        WorkflowExecutionRequest: {
            workflowName?: string;
            parameters?: Record<string, never>;
            orgId?: string;
        };
        WorkflowExecutionResponse: {
            executionId?: string;
            status?: string;
            result?: unknown;
            error?: string;
        };
        DataProviderResponse: {
            provider?: string;
            options?: {
                label?: string;
                value?: string;
                metadata?: Record<string, never>;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
