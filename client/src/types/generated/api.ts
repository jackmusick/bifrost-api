/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all organizations
         * @description Get all organizations (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Organization"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Create a new organization
         * @description Create a new client organization (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateOrganizationRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Organization"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{orgId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization by ID
         * @description Get a specific organization by ID (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Organization ID (UUID) */
                    orgId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Organization"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete an organization
         * @description Soft delete an organization (sets IsActive=False, Platform admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Organization ID (UUID) */
                    orgId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Update an organization
         * @description Update an existing organization (Platform admin only)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Organization ID (UUID) */
                    orgId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateOrganizationRequest"];
                };
            };
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Organization"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        ConfigType: "string" | "int" | "bool" | "json" | "secret_ref";
        /** @enum {string} */
        ExecutionStatus: "Pending" | "Running" | "Success" | "Failed";
        /** @enum {string} */
        FormFieldType: "text" | "email" | "number" | "select" | "checkbox" | "textarea";
        /** @enum {string} */
        IntegrationType: "msgraph" | "halopsa";
        /** @enum {string} */
        UserType: "PLATFORM" | "ORG";
        /**
         * Organization
         * @description Organization entity (response model)
         */
        Organization: {
            /**
             * Id
             * @description Organization ID (GUID)
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Tenantid
             * @description Microsoft 365 GDAP tenant ID
             * @default null
             */
            tenantId: string | null;
            /**
             * Isactive
             * @default true
             */
            isActive: boolean;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
            /** Createdby */
            createdBy: string;
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt: string;
        };
        /**
         * CreateOrganizationRequest
         * @description Request model for creating an organization
         */
        CreateOrganizationRequest: {
            /** Name */
            name: string;
            /**
             * Tenantid
             * @default null
             */
            tenantId: string | null;
        };
        /**
         * UpdateOrganizationRequest
         * @description Request model for updating an organization
         */
        UpdateOrganizationRequest: {
            /**
             * Name
             * @default null
             */
            name: string | null;
            /**
             * Tenantid
             * @default null
             */
            tenantId: string | null;
            /**
             * Isactive
             * @default null
             */
            isActive: boolean | null;
        };
        /**
         * Config
         * @description Configuration entity (global or org-specific)
         */
        Config: {
            /** Key */
            key: string;
            /** Value */
            value: string;
            type: components["schemas"]["ConfigType"];
            /**
             * Scope
             * @description GLOBAL for MSP-wide or 'org' for org-specific
             * @enum {string}
             */
            scope: "GLOBAL" | "org";
            /**
             * Orgid
             * @description Organization ID (only for org-specific config)
             * @default null
             */
            orgId: string | null;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt: string;
            /** Updatedby */
            updatedBy: string;
        };
        /**
         * SetConfigRequest
         * @description Request model for setting config
         */
        SetConfigRequest: {
            /** Key */
            key: string;
            /** Value */
            value: string;
            type: components["schemas"]["ConfigType"];
            /**
             * Scope
             * @description GLOBAL or org
             * @default GLOBAL
             * @enum {string}
             */
            scope: "GLOBAL" | "org";
            /**
             * Description
             * @default null
             */
            description: string | null;
        };
        /**
         * IntegrationConfig
         * @description Integration configuration entity
         */
        IntegrationConfig: {
            type: components["schemas"]["IntegrationType"];
            /**
             * Enabled
             * @default true
             */
            enabled: boolean;
            /**
             * Settings
             * @description Integration-specific settings
             */
            settings: {
                [key: string]: unknown;
            };
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt: string;
            /** Updatedby */
            updatedBy: string;
        };
        /**
         * SetIntegrationConfigRequest
         * @description Request model for setting integration config
         */
        SetIntegrationConfigRequest: {
            type: components["schemas"]["IntegrationType"];
            /**
             * Enabled
             * @default true
             */
            enabled: boolean;
            /** Settings */
            settings: {
                [key: string]: unknown;
            };
        };
        /**
         * User
         * @description User entity
         */
        User: {
            /**
             * Id
             * @description User ID from Azure AD
             */
            id: string;
            /** Email */
            email: string;
            /** Displayname */
            displayName: string;
            /**
             * @description Platform admin or organization user
             * @default PLATFORM
             */
            userType: components["schemas"]["UserType"];
            /**
             * Isplatformadmin
             * @description Whether user is platform admin
             * @default false
             */
            isPlatformAdmin: boolean;
            /**
             * Isactive
             * @default true
             */
            isActive: boolean;
            /**
             * Lastlogin
             * @default null
             */
            lastLogin: string | null;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
        };
        /**
         * Role
         * @description Role entity for organization users
         */
        Role: {
            /**
             * Id
             * @description Role ID (GUID)
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /**
             * Isactive
             * @default true
             */
            isActive: boolean;
            /** Createdby */
            createdBy: string;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt: string;
        };
        /**
         * CreateRoleRequest
         * @description Request model for creating a role
         */
        CreateRoleRequest: {
            /** Name */
            name: string;
            /**
             * Description
             * @default null
             */
            description: string | null;
        };
        /**
         * UpdateRoleRequest
         * @description Request model for updating a role
         */
        UpdateRoleRequest: {
            /**
             * Name
             * @default null
             */
            name: string | null;
            /**
             * Description
             * @default null
             */
            description: string | null;
        };
        /**
         * UserRole
         * @description User-to-Role assignment entity
         */
        UserRole: {
            /** Userid */
            userId: string;
            /** Roleid */
            roleId: string;
            /** Assignedby */
            assignedBy: string;
            /**
             * Assignedat
             * Format: date-time
             */
            assignedAt: string;
        };
        /**
         * FormRole
         * @description Form-to-Role access control entity
         */
        FormRole: {
            /** Formid */
            formId: string;
            /** Roleid */
            roleId: string;
            /** Assignedby */
            assignedBy: string;
            /**
             * Assignedat
             * Format: date-time
             */
            assignedAt: string;
        };
        /**
         * AssignUsersToRoleRequest
         * @description Request model for assigning users to a role
         */
        AssignUsersToRoleRequest: {
            /**
             * Userids
             * @description List of user IDs to assign
             */
            userIds: string[];
        };
        /**
         * AssignFormsToRoleRequest
         * @description Request model for assigning forms to a role
         */
        AssignFormsToRoleRequest: {
            /**
             * Formids
             * @description List of form IDs to assign
             */
            formIds: string[];
        };
        /**
         * UserPermission
         * @description User permission entity
         */
        UserPermission: {
            /** Userid */
            userId: string;
            /** Orgid */
            orgId: string;
            /**
             * Canexecuteworkflows
             * @default false
             */
            canExecuteWorkflows: boolean;
            /**
             * Canmanageconfig
             * @default false
             */
            canManageConfig: boolean;
            /**
             * Canmanageforms
             * @default false
             */
            canManageForms: boolean;
            /**
             * Canviewhistory
             * @default false
             */
            canViewHistory: boolean;
            /** Grantedby */
            grantedBy: string;
            /**
             * Grantedat
             * Format: date-time
             */
            grantedAt: string;
        };
        /**
         * PermissionsData
         * @description Permissions data for grant request
         */
        PermissionsData: {
            /** Canexecuteworkflows */
            canExecuteWorkflows: boolean;
            /** Canmanageconfig */
            canManageConfig: boolean;
            /** Canmanageforms */
            canManageForms: boolean;
            /** Canviewhistory */
            canViewHistory: boolean;
        };
        /**
         * GrantPermissionsRequest
         * @description Request model for granting permissions
         */
        GrantPermissionsRequest: {
            /** Userid */
            userId: string;
            /** Orgid */
            orgId: string;
            permissions: components["schemas"]["PermissionsData"];
        };
        /**
         * FormFieldValidation
         * @description Form field validation rules
         */
        FormFieldValidation: {
            /**
             * Pattern
             * @default null
             */
            pattern: string | null;
            /**
             * Min
             * @default null
             */
            min: number | null;
            /**
             * Max
             * @default null
             */
            max: number | null;
            /**
             * Message
             * @default null
             */
            message: string | null;
        };
        /**
         * FormField
         * @description Form field definition
         */
        FormField: {
            /**
             * Name
             * @description Parameter name for workflow
             */
            name: string;
            /**
             * Label
             * @description Display label
             */
            label: string;
            type: components["schemas"]["FormFieldType"];
            /**
             * Required
             * @default false
             */
            required: boolean;
            /**
             * Validation
             * @default null
             */
            validation: {
                [key: string]: unknown;
            } | null;
            /**
             * Dataprovider
             * @description Data provider name for dynamic options
             * @default null
             */
            dataProvider: string | null;
            /**
             * Defaultvalue
             * @default null
             */
            defaultValue: unknown | null;
            /**
             * Placeholder
             * @default null
             */
            placeholder: string | null;
            /**
             * Helptext
             * @default null
             */
            helpText: string | null;
        };
        /**
         * FormSchema
         * @description Form schema with field definitions
         */
        FormSchema: {
            /**
             * Fields
             * @description Max 50 fields per form
             */
            fields: components["schemas"]["FormField"][];
        };
        /**
         * Form
         * @description Form entity (response model)
         */
        Form: {
            /** Id */
            id: string;
            /**
             * Orgid
             * @description Organization ID or 'GLOBAL'
             */
            orgId: string;
            /** Name */
            name: string;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /**
             * Linkedworkflow
             * @description Workflow name to execute
             */
            linkedWorkflow: string;
            formSchema: components["schemas"]["FormSchema"];
            /**
             * Isactive
             * @default true
             */
            isActive: boolean;
            /**
             * Isglobal
             * @default false
             */
            isGlobal: boolean;
            /**
             * Ispublic
             * @description If true, any authenticated user can execute. If false, only users in assigned groups can execute.
             * @default false
             */
            isPublic: boolean;
            /** Createdby */
            createdBy: string;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt: string;
        };
        /**
         * CreateFormRequest
         * @description Request model for creating a form
         */
        CreateFormRequest: {
            /** Name */
            name: string;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /** Linkedworkflow */
            linkedWorkflow: string;
            formSchema: components["schemas"]["FormSchema"];
            /**
             * Isglobal
             * @default false
             */
            isGlobal: boolean;
            /**
             * Ispublic
             * @description If true, any authenticated user can execute
             * @default false
             */
            isPublic: boolean;
        };
        /**
         * UpdateFormRequest
         * @description Request model for updating a form
         */
        UpdateFormRequest: {
            /**
             * Name
             * @default null
             */
            name: string | null;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /**
             * Linkedworkflow
             * @default null
             */
            linkedWorkflow: string | null;
            /** @default null */
            formSchema: components["schemas"]["FormSchema"] | null;
        };
        /**
         * WorkflowExecution
         * @description Workflow execution entity
         */
        WorkflowExecution: {
            /** Executionid */
            executionId: string;
            /** Workflowname */
            workflowName: string;
            /**
             * Formid
             * @default null
             */
            formId: string | null;
            /** Executedby */
            executedBy: string;
            status: components["schemas"]["ExecutionStatus"];
            /** Inputdata */
            inputData: {
                [key: string]: unknown;
            };
            /**
             * Result
             * @default null
             */
            result: {
                [key: string]: unknown;
            } | null;
            /**
             * Errormessage
             * @default null
             */
            errorMessage: string | null;
            /**
             * Durationms
             * @default null
             */
            durationMs: number | null;
            /**
             * Startedat
             * Format: date-time
             */
            startedAt: string;
            /**
             * Completedat
             * @default null
             */
            completedAt: string | null;
        };
        /**
         * ErrorResponse
         * @description API error response
         */
        ErrorResponse: {
            /**
             * Error
             * @description Error code or type
             */
            error: string;
            /**
             * Message
             * @description Human-readable error message
             */
            message: string;
            /**
             * Details
             * @default null
             */
            details: {
                [key: string]: unknown;
            } | null;
        };
    };
    responses: {
        /** @description Bad request */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Forbidden */
        ForbiddenError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Internal server error */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
