/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/data-providers/{providerName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get data provider options
         * @description Call a data provider and return options
         */
        get: {
            parameters: {
                query?: {
                    /** @description Set to 'true' to bypass cache */
                    no_cache?: string;
                };
                header?: never;
                path: {
                    /** @description Name of the data provider */
                    providerName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DataProviderResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List data providers
         * @description List all available data providers
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DataProviderListResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discovery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Discover available workflows and data providers
         * @description Returns metadata for all registered workflows and data providers
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MetadataResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/endpoints/{workflowName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute a workflow via HTTP endpoint
         * @description Execute a workflow as an HTTP endpoint using API key authentication
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name of the workflow to execute */
                    workflowName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/executions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List workflow executions
         * @description List workflow executions with filtering. Platform admins see all executions in their org scope. Regular users see only their own executions.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by workflow name */
                    workflowName?: string;
                    /** @description Filter by execution status */
                    status?: "Pending" | "Running" | "Success" | "Failed" | "CompletedWithErrors";
                    /** @description Maximum number of results (default: 50, max: 1000) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WorkflowExecution"][];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/executions/{executionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get execution details
         * @description Get detailed information about a specific execution. Platform admins can view any execution in their scope. Regular users can only view their own executions.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Execution ID (UUID) */
                    executionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WorkflowExecution"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/forms/{formId}/files/upload-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate SAS URL for file upload
         * @description Generate a secure SAS URL for uploading files directly to blob storage
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Form ID to associate uploaded file with */
                    formId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FileUploadRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FileUploadResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/forms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List forms
         * @description List all forms visible to the user. Platform admins see all forms in their org scope. Regular users see only forms they can access (public forms + forms assigned to their roles).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Form"][];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Create a new form
         * @description Create a new form (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateFormRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Form"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/forms/{formId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get form by ID
         * @description Get a specific form by ID. User must have access to the form (public or role-assigned).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Form ID (UUID) */
                    formId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Form"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        /**
         * Update a form
         * @description Update an existing form (Platform admin only)
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Form ID (UUID) */
                    formId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateFormRequest"];
                };
            };
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Form"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        post?: never;
        /**
         * Delete a form
         * @description Soft delete a form by setting IsActive=False (Platform admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Form ID (UUID) */
                    formId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/forms/{formId}/startup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute form's launch workflow
         * @description Execute the form's launch workflow to populate initial form context. Accepts parameters via query string (GET) or request body (POST). User must have access to view the form.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Form ID (UUID) */
                    formId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FormExecuteRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FormStartupResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/forms/{formId}/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute a form
         * @description Execute a form and run the linked workflow. User must have access to execute the form (public or role-assigned).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Form ID (UUID) */
                    formId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FormExecuteRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * General health check
         * @description Check the overall health status of the API and its dependencies
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GeneralHealthResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/keyvault": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Key Vault health
         * @description Check the health status of Azure Key Vault integration (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["KeyVaultHealthResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get system metrics
         * @description Get aggregated system statistics including workflow count, form count, execution statistics (30 days), recent failures, and success rate
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DashboardMetricsResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/connections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List OAuth connections
         * @description List all OAuth connections (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Create OAuth connection
         * @description Create a new OAuth connection for integrations (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateOAuthConnectionRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/connections/{connection_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get OAuth connection
         * @description Get OAuth connection details (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Connection name */
                    connection_name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OAuthConnectionDetail"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        /**
         * Update OAuth connection
         * @description Update an OAuth connection (Platform admin only)
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Connection name */
                    connection_name: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateOAuthConnectionRequest"];
                };
            };
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        post?: never;
        /**
         * Delete OAuth connection
         * @description Delete an OAuth connection (Platform admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Connection name */
                    connection_name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/connections/{connection_name}/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authorize OAuth connection
         * @description Initiate OAuth authorization flow (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Connection name */
                    connection_name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/connections/{connection_name}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel OAuth authorization
         * @description Cancel OAuth authorization (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Connection name */
                    connection_name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/connections/{connection_name}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh OAuth token
         * @description Manually refresh OAuth access token using refresh token (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Connection name */
                    connection_name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/callback/{connection_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * OAuth callback
         * @description OAuth callback endpoint - exchanges authorization code for tokens
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Connection name */
                    connection_name: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OAuthCallbackRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OAuthCallbackResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/credentials/{connection_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get OAuth credentials
         * @description Get OAuth credentials for workflow consumption
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Connection name */
                    connection_name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OAuthCredentialsResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/refresh_job_status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get OAuth refresh job status
         * @description Get status of the last OAuth token refresh job (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get configuration values
         * @description Get configuration values for current scope. Platform admins see all configs in their scope (set via X-Organization-Id header). Regular users see configs for their org.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Config"][];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Set configuration value
         * @description Set a configuration value in the current scope (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetConfigRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Config"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete configuration value
         * @description Delete a configuration value by key from current scope (Platform admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Configuration key to delete */
                    key: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{orgId}/integrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization integrations
         * @description Get all integration configurations for an organization (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Organization ID (UUID) */
                    orgId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IntegrationConfig"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Set organization integration
         * @description Set or update an integration configuration for an organization (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Organization ID (UUID) */
                    orgId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetIntegrationConfigRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["IntegrationConfig"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{orgId}/integrations/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete organization integration
         * @description Delete an integration configuration for an organization (Platform admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Organization ID (UUID) */
                    orgId: string;
                    /** @description Integration type */
                    type: "msgraph" | "halopsa";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all organizations
         * @description Get all organizations (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Organization"][];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Create a new organization
         * @description Create a new client organization (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateOrganizationRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Organization"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{orgId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization by ID
         * @description Get a specific organization by ID (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Organization ID (UUID) */
                    orgId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Organization"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete an organization
         * @description Soft delete an organization (sets IsActive=False, Platform admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Organization ID (UUID) */
                    orgId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Update an organization
         * @description Update an existing organization (Platform admin only)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Organization ID (UUID) */
                    orgId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateOrganizationRequest"];
                };
            };
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Organization"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description List all users with optional filtering by type and organization (Platform admin only)
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by user type: 'platform' or 'org' */
                    type?: "platform" | "org";
                    /** @description Filter org users by organization ID */
                    orgId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"][];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user details
         * @description Get a specific user's details (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/permissions/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user permissions (deprecated)
         * @description DEPRECATED: Org-specific permissions have been removed. Returns empty list for backward compatibility.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/permissions/organizations/{orgId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization permissions (deprecated)
         * @description DEPRECATED: Org-specific permissions have been removed. Returns empty list for backward compatibility.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Organization ID */
                    orgId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Grant user permissions (deprecated)
         * @description DEPRECATED: Org-specific permissions have been removed. Use role-based access control instead.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["GrantPermissionsRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        /**
         * Revoke user permissions (deprecated)
         * @description DEPRECATED: Org-specific permissions have been removed. Use role-based access control instead.
         */
        delete: {
            parameters: {
                query: {
                    /** @description User ID */
                    userId: string;
                    /** @description Organization ID */
                    orgId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user roles
         * @description Get all roles assigned to a user (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserRolesResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/forms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user forms
         * @description Get all forms a user can access based on their roles (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserFormsResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all roles
         * @description Get all roles (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Role"][];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Create a role
         * @description Create a new role (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateRoleRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles/{roleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a role
         * @description Update a role (Platform admin only)
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role ID (UUID) */
                    roleId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateRoleRequest"];
                };
            };
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        post?: never;
        /**
         * Delete a role
         * @description Soft delete a role (set IsActive=False) (Platform admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role ID (UUID) */
                    roleId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles/{roleId}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get role users
         * @description Get all users assigned to a role (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role ID (UUID) */
                    roleId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RoleUsersResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Assign users to role
         * @description Assign users to a role (batch operation) (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role ID (UUID) */
                    roleId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AssignUsersToRoleRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles/{roleId}/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove user from role
         * @description Remove a user from a role (Platform admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role ID (UUID) */
                    roleId: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles/{roleId}/forms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get role forms
         * @description Get all forms assigned to a role (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role ID (UUID) */
                    roleId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RoleFormsResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Assign forms to role
         * @description Assign forms to a role (batch operation) (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role ID (UUID) */
                    roleId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AssignFormsToRoleRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles/{roleId}/forms/{formId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove form from role
         * @description Remove a form from a role (Platform admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role ID (UUID) */
                    roleId: string;
                    /** @description Form ID (UUID) */
                    formId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List secrets
         * @description List available secrets from Key Vault, optionally filtered by organization (Platform admin only)
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter secrets by organization ID (returns org-scoped + GLOBAL secrets) */
                    org_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SecretListResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Create a secret
         * @description Create a new secret in Azure Key Vault (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SecretCreateRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SecretResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secrets/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a secret
         * @description Update an existing secret in Azure Key Vault (Platform admin only)
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Full secret name (e.g., 'org-123--api-key' or 'GLOBAL--smtp-password') */
                    name: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SecretUpdateRequest"];
                };
            };
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SecretResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        post?: never;
        /**
         * Delete a secret
         * @description Delete a secret from Azure Key Vault. WARNING: This will delete the secret permanently. (Platform admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Full secret name (e.g., 'org-123--api-key' or 'GLOBAL--smtp-password') */
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflowName}/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute a workflow
         * @description Execute a workflow with the provided parameters (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name of the workflow to execute */
                    workflowName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["WorkflowExecutionRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WorkflowExecutionResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List workflow API keys
         * @description Get all workflow API keys for the current user (Platform admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WorkflowKeyResponse"][];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Create a workflow API key
         * @description Generate a new API key for workflow HTTP access (Platform admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["WorkflowKeyCreateRequest"];
                };
            };
            responses: {
                /** @description Resource created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WorkflowKeyResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-keys/{keyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Revoke a workflow API key
         * @description Revoke an existing workflow API key (Platform admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the key to revoke */
                    keyId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/endpoints/test_workflow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GET test_workflow
         * @description Simple test workflow for validation
         */
        get: operations["execute_workflow_endpoint_test_workflow_get"];
        put?: never;
        /**
         * POST test_workflow
         * @description Simple test workflow for validation
         */
        post: operations["execute_workflow_endpoint_test_workflow_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/endpoints/webhook_example": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * POST webhook_example
         * @description Public webhook endpoint for external integrations
         */
        post: operations["execute_workflow_endpoint_webhook_example_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Organization
         * @description Organization entity (response model)
         */
        Organization: {
            /**
             * Id
             * @description Organization ID (GUID)
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Domain
             * @description Email domain for auto-provisioning users (e.g., 'acme.com')
             * @default null
             */
            domain: string | null;
            /**
             * Isactive
             * @default true
             */
            isActive: boolean;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
            /** Createdby */
            createdBy: string;
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt: string;
        };
        /**
         * CreateOrganizationRequest
         * @description Request model for creating an organization
         */
        CreateOrganizationRequest: {
            /** Name */
            name: string;
            /**
             * Domain
             * @description Email domain for auto-provisioning users (e.g., 'acme.com')
             * @default null
             */
            domain: string | null;
        };
        /**
         * UpdateOrganizationRequest
         * @description Request model for updating an organization
         */
        UpdateOrganizationRequest: {
            /**
             * Name
             * @default null
             */
            name: string | null;
            /**
             * Domain
             * @description Email domain for auto-provisioning users
             * @default null
             */
            domain: string | null;
            /**
             * Isactive
             * @default null
             */
            isActive: boolean | null;
        };
        /**
         * ConfigType
         * @description Configuration value types
         * @enum {string}
         */
        ConfigType: "string" | "int" | "bool" | "json" | "secret_ref";
        /**
         * Config
         * @description Configuration entity (global or org-specific)
         */
        Config: {
            /** Key */
            key: string;
            /** Value */
            value: string;
            type: components["schemas"]["ConfigType"];
            /**
             * Scope
             * @description GLOBAL for MSP-wide or 'org' for org-specific
             * @enum {string}
             */
            scope: "GLOBAL" | "org";
            /**
             * Orgid
             * @description Organization ID (only for org-specific config)
             * @default null
             */
            orgId: string | null;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt: string;
            /** Updatedby */
            updatedBy: string;
        };
        /**
         * SetConfigRequest
         * @description Request model for setting config
         */
        SetConfigRequest: {
            /** Key */
            key: string;
            /** Value */
            value: string;
            type: components["schemas"]["ConfigType"];
            /**
             * Description
             * @default null
             */
            description: string | null;
        };
        /**
         * IntegrationType
         * @description Supported integration types
         * @enum {string}
         */
        IntegrationType: "msgraph" | "halopsa";
        /**
         * IntegrationConfig
         * @description Integration configuration entity
         */
        IntegrationConfig: {
            type: components["schemas"]["IntegrationType"];
            /**
             * Enabled
             * @default true
             */
            enabled: boolean;
            /**
             * Settings
             * @description Integration-specific settings
             */
            settings: {
                [key: string]: unknown;
            };
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt: string;
            /** Updatedby */
            updatedBy: string;
        };
        /**
         * SetIntegrationConfigRequest
         * @description Request model for setting integration config
         */
        SetIntegrationConfigRequest: {
            type: components["schemas"]["IntegrationType"];
            /**
             * Enabled
             * @default true
             */
            enabled: boolean;
            /** Settings */
            settings: {
                [key: string]: unknown;
            };
        };
        /**
         * UserType
         * @description User type - Platform admin or organization user
         * @enum {string}
         */
        UserType: "PLATFORM" | "ORG";
        /**
         * User
         * @description User entity
         */
        User: {
            /**
             * Id
             * @description User ID from Azure AD
             */
            id: string;
            /** Email */
            email: string;
            /** Displayname */
            displayName: string;
            /**
             * @description Platform admin or organization user
             * @default PLATFORM
             */
            userType: components["schemas"]["UserType"];
            /**
             * Isplatformadmin
             * @description Whether user is platform admin
             * @default false
             */
            isPlatformAdmin: boolean;
            /**
             * Isactive
             * @default true
             */
            isActive: boolean;
            /**
             * Lastlogin
             * @default null
             */
            lastLogin: string | null;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
            /**
             * Entrauserid
             * @description Azure AD user object ID (oid claim) for duplicate prevention
             * @default null
             */
            entraUserId: string | null;
            /**
             * Lastentraidsync
             * @description Last synchronization timestamp from Azure AD
             * @default null
             */
            lastEntraIdSync: string | null;
        };
        /**
         * Role
         * @description Role entity for organization users
         */
        Role: {
            /**
             * Id
             * @description Role ID (GUID)
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /**
             * Isactive
             * @default true
             */
            isActive: boolean;
            /** Createdby */
            createdBy: string;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt: string;
        };
        /**
         * CreateRoleRequest
         * @description Request model for creating a role
         */
        CreateRoleRequest: {
            /** Name */
            name: string;
            /**
             * Description
             * @default null
             */
            description: string | null;
        };
        /**
         * UpdateRoleRequest
         * @description Request model for updating a role
         */
        UpdateRoleRequest: {
            /**
             * Name
             * @default null
             */
            name: string | null;
            /**
             * Description
             * @default null
             */
            description: string | null;
        };
        /**
         * UserRole
         * @description User-to-Role assignment entity
         */
        UserRole: {
            /** Userid */
            userId: string;
            /** Roleid */
            roleId: string;
            /** Assignedby */
            assignedBy: string;
            /**
             * Assignedat
             * Format: date-time
             */
            assignedAt: string;
        };
        /**
         * FormRole
         * @description Form-to-Role access control entity
         */
        FormRole: {
            /** Formid */
            formId: string;
            /** Roleid */
            roleId: string;
            /** Assignedby */
            assignedBy: string;
            /**
             * Assignedat
             * Format: date-time
             */
            assignedAt: string;
        };
        /**
         * RoleUsersResponse
         * @description Response model for getting users assigned to a role
         */
        RoleUsersResponse: {
            /**
             * Userids
             * @description List of user IDs assigned to the role
             */
            userIds: string[];
        };
        /**
         * RoleFormsResponse
         * @description Response model for getting forms assigned to a role
         */
        RoleFormsResponse: {
            /**
             * Formids
             * @description List of form IDs assigned to the role
             */
            formIds: string[];
        };
        /**
         * AssignUsersToRoleRequest
         * @description Request model for assigning users to a role
         */
        AssignUsersToRoleRequest: {
            /**
             * Userids
             * @description List of user IDs to assign
             */
            userIds: string[];
        };
        /**
         * AssignFormsToRoleRequest
         * @description Request model for assigning forms to a role
         */
        AssignFormsToRoleRequest: {
            /**
             * Formids
             * @description List of form IDs to assign
             */
            formIds: string[];
        };
        /**
         * UserPermission
         * @description User permission entity
         */
        UserPermission: {
            /** Userid */
            userId: string;
            /** Orgid */
            orgId: string;
            /**
             * Canexecuteworkflows
             * @default false
             */
            canExecuteWorkflows: boolean;
            /**
             * Canmanageconfig
             * @default false
             */
            canManageConfig: boolean;
            /**
             * Canmanageforms
             * @default false
             */
            canManageForms: boolean;
            /**
             * Canviewhistory
             * @default false
             */
            canViewHistory: boolean;
            /** Grantedby */
            grantedBy: string;
            /**
             * Grantedat
             * Format: date-time
             */
            grantedAt: string;
        };
        /**
         * PermissionsData
         * @description Permissions data for grant request
         */
        PermissionsData: {
            /** Canexecuteworkflows */
            canExecuteWorkflows: boolean;
            /** Canmanageconfig */
            canManageConfig: boolean;
            /** Canmanageforms */
            canManageForms: boolean;
            /** Canviewhistory */
            canViewHistory: boolean;
        };
        /**
         * GrantPermissionsRequest
         * @description Request model for granting permissions
         */
        GrantPermissionsRequest: {
            /** Userid */
            userId: string;
            /** Orgid */
            orgId: string;
            permissions: components["schemas"]["PermissionsData"];
        };
        /**
         * UserRolesResponse
         * @description Response model for getting roles assigned to a user
         */
        UserRolesResponse: {
            /**
             * Roleids
             * @description List of role IDs assigned to the user
             */
            roleIds: string[];
        };
        /**
         * UserFormsResponse
         * @description Response model for getting forms accessible to a user
         */
        UserFormsResponse: {
            /** @description User type (PLATFORM or ORG) */
            userType: components["schemas"]["UserType"];
            /**
             * Hasaccesstoallforms
             * @description Whether user has access to all forms
             */
            hasAccessToAllForms: boolean;
            /**
             * Formids
             * @description List of form IDs user can access (empty if hasAccessToAllForms=true)
             */
            formIds?: string[];
        };
        /**
         * FormFieldValidation
         * @description Form field validation rules
         */
        FormFieldValidation: {
            /**
             * Pattern
             * @default null
             */
            pattern: string | null;
            /**
             * Min
             * @default null
             */
            min: number | null;
            /**
             * Max
             * @default null
             */
            max: number | null;
            /**
             * Message
             * @default null
             */
            message: string | null;
        };
        /**
         * FormFieldType
         * @description Form field types
         * @enum {string}
         */
        FormFieldType: "text" | "email" | "number" | "select" | "checkbox" | "textarea" | "radio" | "datetime" | "markdown" | "html" | "file";
        /**
         * FormField
         * @description Form field definition
         */
        FormField: {
            /**
             * Name
             * @description Parameter name for workflow
             */
            name: string;
            /**
             * Label
             * @description Display label
             */
            label: string;
            type: components["schemas"]["FormFieldType"];
            /**
             * Required
             * @default false
             */
            required: boolean;
            /**
             * Validation
             * @default null
             */
            validation: {
                [key: string]: unknown;
            } | null;
            /**
             * Dataprovider
             * @description Data provider name for dynamic options
             * @default null
             */
            dataProvider: string | null;
            /**
             * Defaultvalue
             * @default null
             */
            defaultValue: unknown | null;
            /**
             * Placeholder
             * @default null
             */
            placeholder: string | null;
            /**
             * Helptext
             * @default null
             */
            helpText: string | null;
            /**
             * Visibilityexpression
             * @description JavaScript expression for conditional visibility (e.g., context.field.show === true)
             * @default null
             */
            visibilityExpression: string | null;
            /**
             * Options
             * @description Options for radio/select fields
             * @default null
             */
            options: {
                [key: string]: string;
            }[] | null;
            /**
             * Allowedtypes
             * @description Allowed MIME types for file uploads
             * @default null
             */
            allowedTypes: string[] | null;
            /**
             * Multiple
             * @description Allow multiple file uploads
             * @default null
             */
            multiple: boolean | null;
            /**
             * Maxsizemb
             * @description Maximum file size in MB
             * @default null
             */
            maxSizeMB: number | null;
            /**
             * Content
             * @description Static content for markdown/HTML components
             * @default null
             */
            content: string | null;
            /**
             * Allowasqueryparam
             * @description Whether this field's value can be populated from URL query parameters
             * @default null
             */
            allowAsQueryParam: boolean | null;
        };
        /**
         * FormSchema
         * @description Form schema with field definitions
         */
        FormSchema: {
            /**
             * Fields
             * @description Max 50 fields per form
             */
            fields: components["schemas"]["FormField"][];
        };
        /**
         * Form
         * @description Form entity (response model)
         */
        Form: {
            /** Id */
            id: string;
            /**
             * Orgid
             * @description Organization ID or 'GLOBAL'
             */
            orgId: string;
            /** Name */
            name: string;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /**
             * Linkedworkflow
             * @description Workflow name to execute
             */
            linkedWorkflow: string;
            formSchema: components["schemas"]["FormSchema"];
            /**
             * Isactive
             * @default true
             */
            isActive: boolean;
            /**
             * Isglobal
             * @default false
             */
            isGlobal: boolean;
            /**
             * Ispublic
             * @description If true, any authenticated user can execute. If false, only users in assigned groups can execute.
             * @default false
             */
            isPublic: boolean;
            /** Createdby */
            createdBy: string;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt: string;
            /**
             * Launchworkflowid
             * @description Optional workflow to execute on form load for context generation
             * @default null
             */
            launchWorkflowId: string | null;
            /**
             * Allowedqueryparams
             * @description List of allowed query parameter names to inject into form context
             * @default null
             */
            allowedQueryParams: string[] | null;
            /**
             * Defaultlaunchparams
             * @description Default parameter values for launch workflow (used when not provided via query params or POST body)
             * @default null
             */
            defaultLaunchParams: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * CreateFormRequest
         * @description Request model for creating a form
         */
        CreateFormRequest: {
            /** Name */
            name: string;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /** Linkedworkflow */
            linkedWorkflow: string;
            formSchema: components["schemas"]["FormSchema"];
            /**
             * Isglobal
             * @default false
             */
            isGlobal: boolean;
            /**
             * Ispublic
             * @description If true, any authenticated user can execute
             * @default false
             */
            isPublic: boolean;
            /**
             * Launchworkflowid
             * @description Optional workflow to execute on form load for context generation
             * @default null
             */
            launchWorkflowId: string | null;
            /**
             * Allowedqueryparams
             * @description List of allowed query parameter names to inject into form context
             * @default null
             */
            allowedQueryParams: string[] | null;
            /**
             * Defaultlaunchparams
             * @description Default parameter values for launch workflow (used when not provided via query params or POST body)
             * @default null
             */
            defaultLaunchParams: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * UpdateFormRequest
         * @description Request model for updating a form
         */
        UpdateFormRequest: {
            /**
             * Name
             * @default null
             */
            name: string | null;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /**
             * Linkedworkflow
             * @default null
             */
            linkedWorkflow: string | null;
            /** @default null */
            formSchema: components["schemas"]["FormSchema"] | null;
            /**
             * Isactive
             * @default null
             */
            isActive: boolean | null;
            /**
             * Launchworkflowid
             * @description Optional workflow to execute on form load for context generation
             * @default null
             */
            launchWorkflowId: string | null;
            /**
             * Allowedqueryparams
             * @description List of allowed query parameter names to inject into form context
             * @default null
             */
            allowedQueryParams: string[] | null;
            /**
             * Defaultlaunchparams
             * @description Default parameter values for launch workflow (used when not provided via query params or POST body)
             * @default null
             */
            defaultLaunchParams: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * FormExecuteRequest
         * @description Request model for executing a form
         */
        FormExecuteRequest: {
            /**
             * Form Data
             * @description Form field values
             */
            form_data: {
                [key: string]: unknown;
            };
        };
        /**
         * FormStartupResponse
         * @description Response model for form startup/launch workflow execution
         */
        FormStartupResponse: {
            /**
             * Result
             * @description Workflow execution result
             * @default null
             */
            result: {
                [key: string]: unknown;
            } | string | null;
        };
        /**
         * ExecutionLog
         * @description Single log entry from workflow execution
         */
        ExecutionLog: {
            /** Timestamp */
            timestamp: string;
            /** Level */
            level: string;
            /** Message */
            message: string;
            /**
             * Data
             * @default null
             */
            data: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * ExecutionStatus
         * @description Workflow execution status
         * @enum {string}
         */
        ExecutionStatus: "Pending" | "Running" | "Success" | "Failed" | "CompletedWithErrors";
        /**
         * WorkflowExecution
         * @description Workflow execution entity
         */
        WorkflowExecution: {
            /** Executionid */
            executionId: string;
            /** Workflowname */
            workflowName: string;
            /**
             * Orgid
             * @default null
             */
            orgId: string | null;
            /**
             * Formid
             * @default null
             */
            formId: string | null;
            /** Executedby */
            executedBy: string;
            /** Executedbyname */
            executedByName: string;
            status: components["schemas"]["ExecutionStatus"];
            /** Inputdata */
            inputData: {
                [key: string]: unknown;
            };
            /**
             * Result
             * @default null
             */
            result: {
                [key: string]: unknown;
            } | string | null;
            /**
             * Resulttype
             * @default null
             */
            resultType: ("json" | "html" | "text") | null;
            /**
             * Errormessage
             * @default null
             */
            errorMessage: string | null;
            /**
             * Durationms
             * @default null
             */
            durationMs: number | null;
            /**
             * Startedat
             * Format: date-time
             */
            startedAt: string;
            /**
             * Completedat
             * @default null
             */
            completedAt: string | null;
            /**
             * Logs
             * @default null
             */
            logs: components["schemas"]["ExecutionLog"][] | null;
        };
        /**
         * WorkflowExecutionRequest
         * @description Request model for executing a workflow
         */
        WorkflowExecutionRequest: {
            /**
             * Inputdata
             * @description Workflow input parameters
             */
            inputData?: {
                [key: string]: unknown;
            };
            /**
             * Formid
             * @description Optional form ID that triggered this execution
             * @default null
             */
            formId: string | null;
        };
        /**
         * WorkflowExecutionResponse
         * @description Response model for workflow execution
         */
        WorkflowExecutionResponse: {
            /** Executionid */
            executionId: string;
            status: components["schemas"]["ExecutionStatus"];
            /**
             * Result
             * @default null
             */
            result: {
                [key: string]: unknown;
            } | string | null;
            /**
             * Error
             * @default null
             */
            error: string | null;
            /**
             * Errortype
             * @default null
             */
            errorType: string | null;
            /**
             * Details
             * @default null
             */
            details: {
                [key: string]: unknown;
            } | null;
            /**
             * Durationms
             * @default null
             */
            durationMs: number | null;
            /**
             * Startedat
             * @default null
             */
            startedAt: string | null;
            /**
             * Completedat
             * @default null
             */
            completedAt: string | null;
        };
        /**
         * ExecutionsListResponse
         * @description Response model for listing workflow executions
         */
        ExecutionsListResponse: {
            /**
             * Executions
             * @description List of workflow executions
             */
            executions: components["schemas"]["WorkflowExecution"][];
        };
        /**
         * WorkflowParameter
         * @description Workflow parameter metadata
         */
        WorkflowParameter: {
            /** Name */
            name: string;
            /** Type */
            type: string;
            /** Required */
            required: boolean;
            /**
             * Dataprovider
             * @default null
             */
            dataProvider: string | null;
            /**
             * Description
             * @default null
             */
            description: string | null;
        };
        /**
         * WorkflowMetadata
         * @description Workflow metadata from @workflow decorator
         */
        WorkflowMetadata: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /**
             * Category
             * @default General
             */
            category: string;
            /** Parameters */
            parameters?: components["schemas"]["WorkflowParameter"][];
            /**
             * Requiresorg
             * @description Whether workflow requires org context
             * @default true
             */
            requiresOrg: boolean;
            /**
             * Endpointenabled
             * @description Whether workflow is exposed as HTTP endpoint
             * @default false
             */
            endpointEnabled: boolean;
            /**
             * Allowedmethods
             * @description Allowed HTTP methods for endpoint
             */
            allowedMethods?: string[];
            /**
             * Disableglobalkey
             * @description If true, only workflow-specific API keys work (global keys denied)
             * @default false
             */
            disableGlobalKey: boolean;
            /**
             * Publicendpoint
             * @description If true, skip authentication (for webhooks)
             * @default false
             */
            publicEndpoint: boolean;
        };
        /**
         * DataProviderMetadata
         * @description Data provider metadata from @data_provider decorator
         */
        DataProviderMetadata: {
            /** Name */
            name: string;
            /** Description */
            description: string;
        };
        /**
         * MetadataResponse
         * @description Response model for /admin/workflow endpoint
         */
        MetadataResponse: {
            /** Workflows */
            workflows?: components["schemas"]["WorkflowMetadata"][];
            /** Option Generators */
            option_generators?: components["schemas"]["DataProviderMetadata"][];
        };
        /**
         * DataProviderOption
         * @description Data provider option item
         */
        DataProviderOption: {
            /** Label */
            label: string;
            /** Value */
            value: string;
            /**
             * Metadata
             * @default null
             */
            metadata: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * DataProviderResponse
         * @description Response model for data provider endpoint
         */
        DataProviderResponse: {
            /**
             * Provider
             * @description Name of the data provider
             */
            provider: string;
            /**
             * Options
             * @description List of options returned by the provider
             */
            options: components["schemas"]["DataProviderOption"][];
            /**
             * Cached
             * @description Whether this result was served from cache
             */
            cached: boolean;
            /**
             * Cache Expires At
             * @description Cache expiration timestamp
             */
            cache_expires_at: string;
        };
        /**
         * SecretListResponse
         * @description Response model for listing secrets
         */
        SecretListResponse: {
            /**
             * Secrets
             * @description List of secret names available in Key Vault
             */
            secrets: string[];
            /**
             * Orgid
             * @description Organization ID filter (if applied)
             * @default null
             */
            orgId: string | null;
            /**
             * Count
             * @description Total number of secrets returned
             */
            count: number;
        };
        /**
         * SecretCreateRequest
         * @description Request model for creating a secret
         */
        SecretCreateRequest: {
            /**
             * Orgid
             * @description Organization ID or 'GLOBAL' for platform-wide
             */
            orgId: string;
            /**
             * Secretkey
             * @description Secret key (alphanumeric, hyphens, underscores)
             */
            secretKey: string;
            /**
             * Value
             * @description Secret value
             */
            value: string;
        };
        /**
         * SecretUpdateRequest
         * @description Request model for updating a secret
         */
        SecretUpdateRequest: {
            /**
             * Value
             * @description New secret value
             */
            value: string;
        };
        /**
         * SecretResponse
         * @description Response model for secret operations
         */
        SecretResponse: {
            /**
             * Name
             * @description Full secret name in Key Vault (e.g., org-123--api-key)
             */
            name: string;
            /**
             * Orgid
             * @description Organization ID or 'GLOBAL'
             */
            orgId: string;
            /**
             * Secretkey
             * @description Secret key portion
             */
            secretKey: string;
            /**
             * Value
             * @description Secret value (only shown immediately after create/update)
             * @default null
             */
            value: string | null;
            /**
             * Message
             * @description Operation result message
             */
            message: string;
        };
        /**
         * HealthCheck
         * @description Individual health check result
         */
        HealthCheck: {
            /**
             * Service
             * @description Display name of the service (e.g., 'API', 'Key Vault')
             */
            service: string;
            /**
             * Healthy
             * @description Whether the service is healthy
             */
            healthy: boolean;
            /**
             * Message
             * @description Health check message
             */
            message: string;
            /**
             * Metadata
             * @description Additional service-specific metadata
             */
            metadata?: {
                [key: string]: unknown;
            };
        };
        /**
         * GeneralHealthResponse
         * @description General health check response with multiple service checks
         */
        GeneralHealthResponse: {
            /**
             * Status
             * @description Overall system health status
             * @enum {string}
             */
            status: "healthy" | "degraded" | "unhealthy";
            /**
             * Service
             * @description Service name
             * @default Bifrost Integrations API
             */
            service: string;
            /**
             * Timestamp
             * Format: date-time
             * @description Health check timestamp
             */
            timestamp: string;
            /**
             * Checks
             * @description Individual service health checks
             */
            checks: components["schemas"]["HealthCheck"][];
        };
        /**
         * KeyVaultHealthResponse
         * @description Health check response for Azure Key Vault
         */
        KeyVaultHealthResponse: {
            /**
             * Status
             * @description Health status
             * @enum {string}
             */
            status: "healthy" | "degraded" | "unhealthy";
            /**
             * Message
             * @description Health status message
             */
            message: string;
            /**
             * Vaulturl
             * @description Key Vault URL being monitored
             * @default null
             */
            vaultUrl: string | null;
            /**
             * Canconnect
             * @description Whether connection to Key Vault succeeded
             */
            canConnect: boolean;
            /**
             * Canlistsecrets
             * @description Whether listing secrets is permitted
             */
            canListSecrets: boolean;
            /**
             * Cangetsecrets
             * @description Whether reading secrets is permitted
             */
            canGetSecrets: boolean;
            /**
             * Secretcount
             * @description Number of secrets in Key Vault (if accessible)
             * @default null
             */
            secretCount: number | null;
            /**
             * Lastchecked
             * Format: date-time
             * @description Timestamp of health check
             */
            lastChecked: string;
        };
        /**
         * ExecutionStats
         * @description Execution statistics for dashboard
         */
        ExecutionStats: {
            /** Totalexecutions */
            totalExecutions: number;
            /** Successcount */
            successCount: number;
            /** Failedcount */
            failedCount: number;
            /** Runningcount */
            runningCount: number;
            /** Pendingcount */
            pendingCount: number;
            /** Successrate */
            successRate: number;
            /** Avgdurationseconds */
            avgDurationSeconds: number;
        };
        /**
         * RecentFailure
         * @description Recent failed execution info
         */
        RecentFailure: {
            /** Executionid */
            executionId: string;
            /** Workflowname */
            workflowName: string;
            /** Errormessage */
            errorMessage: string | null;
            /** Startedat */
            startedAt: string | null;
        };
        /**
         * DashboardMetricsResponse
         * @description Dashboard metrics response
         */
        DashboardMetricsResponse: {
            /** Workflowcount */
            workflowCount: number;
            /** Dataprovidercount */
            dataProviderCount: number;
            /** Formcount */
            formCount: number;
            executionStats: components["schemas"]["ExecutionStats"];
            /** Recentfailures */
            recentFailures: components["schemas"]["RecentFailure"][];
        };
        /**
         * OAuthCallbackRequest
         * @description Request model for OAuth callback endpoint
         */
        OAuthCallbackRequest: {
            /**
             * Code
             * @description Authorization code from OAuth provider
             */
            code: string;
            /**
             * State
             * @description State parameter for CSRF protection
             * @default null
             */
            state: string | null;
        };
        /**
         * OAuthCallbackResponse
         * @description Response model for OAuth callback endpoint
         */
        OAuthCallbackResponse: {
            /**
             * Success
             * @description Whether the OAuth connection was successful
             */
            success: boolean;
            /**
             * Message
             * @description Status message
             */
            message: string;
            /**
             * Status
             * @description Connection status
             */
            status: string;
            /**
             * Connection Name
             * @description Name of the OAuth connection
             */
            connection_name: string;
            /**
             * Warning Message
             * @description Warning message displayed to user (e.g., missing refresh token)
             * @default null
             */
            warning_message: string | null;
            /**
             * Error Message
             * @description Error message displayed to user
             * @default null
             */
            error_message: string | null;
        };
        /**
         * FileUploadRequest
         * @description Request model for generating file upload SAS URL
         */
        FileUploadRequest: {
            /**
             * File Name
             * @description Original file name
             */
            file_name: string;
            /**
             * Content Type
             * @description MIME type of the file
             */
            content_type: string;
            /**
             * File Size
             * @description File size in bytes
             */
            file_size: number;
        };
        /**
         * FileUploadResponse
         * @description Response model for file upload SAS URL generation
         */
        FileUploadResponse: {
            /**
             * Upload Url
             * @description SAS URL for direct upload to Blob Storage
             */
            upload_url: string;
            /**
             * Blob Uri
             * @description Final blob URI (without SAS token)
             */
            blob_uri: string;
            /**
             * Expires At
             * @description SAS token expiration timestamp (ISO format)
             */
            expires_at: string;
        };
        /**
         * WorkflowKey
         * @description Workflow API Key for HTTP access without user authentication
         */
        WorkflowKey: {
            /**
             * Id
             * @description Unique key ID
             */
            id?: string;
            /**
             * Hashedkey
             * @description SHA-256 hash of the API key
             */
            hashedKey: string;
            /**
             * Workflowid
             * @description Workflow-specific key, or None for global access
             * @default null
             */
            workflowId: string | null;
            /**
             * Createdby
             * @description User email who created the key
             */
            createdBy: string;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt?: string;
            /**
             * Lastusedat
             * @default null
             */
            lastUsedAt: string | null;
            /**
             * Revoked
             * @default false
             */
            revoked: boolean;
            /**
             * Revokedat
             * @default null
             */
            revokedAt: string | null;
            /**
             * Revokedby
             * @default null
             */
            revokedBy: string | null;
            /**
             * Expiresat
             * @description Optional expiration timestamp
             * @default null
             */
            expiresAt: string | null;
            /**
             * Description
             * @description Optional key description
             * @default null
             */
            description: string | null;
            /**
             * Disableglobalkey
             * @description If true, workflow opts out of global API keys
             * @default false
             */
            disableGlobalKey: boolean;
        };
        /**
         * WorkflowKeyCreateRequest
         * @description Request model for creating a workflow API key
         */
        WorkflowKeyCreateRequest: {
            /**
             * Workflowid
             * @description Workflow-specific key, or None for global
             * @default null
             */
            workflowId: string | null;
            /**
             * Expiresindays
             * @description Days until key expires (default: no expiration)
             * @default null
             */
            expiresInDays: number | null;
            /**
             * Description
             * @description Optional key description
             * @default null
             */
            description: string | null;
            /**
             * Disableglobalkey
             * @description If true, workflow opts out of global API keys
             * @default false
             */
            disableGlobalKey: boolean;
        };
        /**
         * WorkflowKeyResponse
         * @description Response model for workflow key (includes raw key on creation only)
         */
        WorkflowKeyResponse: {
            /** Id */
            id: string;
            /**
             * Rawkey
             * @description Raw API key (only returned on creation)
             * @default null
             */
            rawKey: string | null;
            /**
             * Maskedkey
             * @description Last 4 characters for display
             * @default null
             */
            maskedKey: string | null;
            /**
             * Workflowid
             * @default null
             */
            workflowId: string | null;
            /** Createdby */
            createdBy: string;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
            /**
             * Lastusedat
             * @default null
             */
            lastUsedAt: string | null;
            /** Revoked */
            revoked: boolean;
            /**
             * Expiresat
             * @default null
             */
            expiresAt: string | null;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /**
             * Disableglobalkey
             * @description If true, workflow opts out of global API keys
             * @default false
             */
            disableGlobalKey: boolean;
        };
        /**
         * AsyncExecutionStatus
         * @description Async execution status values
         * @enum {string}
         */
        AsyncExecutionStatus: "queued" | "running" | "completed" | "failed" | "cancelled";
        /**
         * AsyncExecution
         * @description Async workflow execution tracking
         */
        AsyncExecution: {
            /** Executionid */
            executionId?: string;
            /**
             * Workflowid
             * @description Workflow name to execute
             */
            workflowId: string;
            /** @default queued */
            status: components["schemas"]["AsyncExecutionStatus"];
            /**
             * Parameters
             * @description Workflow input parameters
             */
            parameters?: {
                [key: string]: unknown;
            };
            /**
             * Context
             * @description Execution context (org scope, user)
             */
            context?: {
                [key: string]: unknown;
            };
            /**
             * Result
             * @description Workflow result (for small results)
             * @default null
             */
            result: unknown | null;
            /**
             * Resultbloburi
             * @description Blob URI for large results (>32KB)
             * @default null
             */
            resultBlobUri: string | null;
            /**
             * Error
             * @description Error message if failed
             * @default null
             */
            error: string | null;
            /**
             * Errordetails
             * @description Detailed error information
             * @default null
             */
            errorDetails: {
                [key: string]: unknown;
            } | null;
            /**
             * Queuedat
             * Format: date-time
             */
            queuedAt?: string;
            /**
             * Startedat
             * @default null
             */
            startedAt: string | null;
            /**
             * Completedat
             * @default null
             */
            completedAt: string | null;
            /**
             * Durationms
             * @description Execution duration in milliseconds
             * @default null
             */
            durationMs: number | null;
        };
        /**
         * CronSchedule
         * @description CRON schedule configuration for automatic workflow execution
         */
        CronSchedule: {
            /** Id */
            id?: string;
            /**
             * Workflowid
             * @description Workflow name to execute on schedule
             */
            workflowId: string;
            /**
             * Cronexpression
             * @description Standard CRON expression (e.g., '0 2 * * *')
             */
            cronExpression: string;
            /**
             * Humanreadable
             * @description Human-readable schedule description
             * @default null
             */
            humanReadable: string | null;
            /**
             * Enabled
             * @default true
             */
            enabled: boolean;
            /**
             * Parameters
             * @description Default parameters for execution
             */
            parameters?: {
                [key: string]: unknown;
            };
            /**
             * Nextrunat
             * Format: date-time
             * @description Next scheduled execution time
             */
            nextRunAt: string;
            /**
             * Lastrunat
             * @default null
             */
            lastRunAt: string | null;
            /**
             * Lastexecutionid
             * @description ID of last execution
             * @default null
             */
            lastExecutionId: string | null;
            /**
             * Createdby
             * @description User email who created the schedule
             */
            createdBy: string;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt?: string;
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt?: string;
        };
        /**
         * CronScheduleCreateRequest
         * @description Request model for creating a CRON schedule
         */
        CronScheduleCreateRequest: {
            /**
             * Workflowid
             * @description Workflow name to schedule
             */
            workflowId: string;
            /**
             * Cronexpression
             * @description CRON expression (e.g., '0 2 * * *' for 2am daily)
             */
            cronExpression: string;
            /** Parameters */
            parameters?: {
                [key: string]: unknown;
            };
            /**
             * Enabled
             * @default true
             */
            enabled: boolean;
        };
        /**
         * CronScheduleUpdateRequest
         * @description Request model for updating a CRON schedule
         */
        CronScheduleUpdateRequest: {
            /**
             * Cronexpression
             * @default null
             */
            cronExpression: string | null;
            /**
             * Parameters
             * @default null
             */
            parameters: {
                [key: string]: unknown;
            } | null;
            /**
             * Enabled
             * @default null
             */
            enabled: boolean | null;
        };
        /**
         * BrandingSettings
         * @description Organization branding configuration
         */
        BrandingSettings: {
            /**
             * Orgid
             * @description Organization ID or 'GLOBAL' for platform default
             */
            orgId: string;
            /**
             * Squarelogourl
             * @description Square logo URL (for icons, 1:1 ratio)
             * @default null
             */
            squareLogoUrl: string | null;
            /**
             * Rectanglelogourl
             * @description Rectangle logo URL (for headers, 16:9 ratio)
             * @default null
             */
            rectangleLogoUrl: string | null;
            /**
             * Primarycolor
             * @description Primary brand color (hex format, e.g., #FF5733)
             * @default null
             */
            primaryColor: string | null;
            /**
             * Updatedby
             * @description User email who last updated branding
             */
            updatedBy: string;
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt?: string;
        };
        /**
         * BrandingUpdateRequest
         * @description Request model for updating branding settings
         */
        BrandingUpdateRequest: {
            /**
             * Squarelogourl
             * @default null
             */
            squareLogoUrl: string | null;
            /**
             * Rectanglelogourl
             * @default null
             */
            rectangleLogoUrl: string | null;
            /**
             * Primarycolor
             * @default null
             */
            primaryColor: string | null;
        };
        /**
         * ErrorResponse
         * @description API error response
         */
        ErrorResponse: {
            /**
             * Error
             * @description Error code or type
             */
            error: string;
            /**
             * Message
             * @description Human-readable error message
             */
            message: string;
            /**
             * Details
             * @default null
             */
            details: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * CreateOAuthConnectionRequest
         * @description Request model for creating a new OAuth connection
         *     POST /api/oauth/connections
         */
        CreateOAuthConnectionRequest: {
            /**
             * Connection Name
             * @description Unique connection identifier (alphanumeric, underscores, hyphens)
             */
            connection_name: string;
            /**
             * Description
             * @description Optional description of this OAuth connection
             * @default null
             */
            description: string | null;
            /**
             * Oauth Flow Type
             * @description OAuth 2.0 flow type
             * @enum {string}
             */
            oauth_flow_type: "authorization_code" | "client_credentials" | "refresh_token";
            /**
             * Client Id
             * @description OAuth client ID (not sensitive)
             */
            client_id: string;
            /**
             * Client Secret
             * @description OAuth client secret (optional for PKCE flow, will be stored securely in Key Vault)
             * @default null
             */
            client_secret: string | null;
            /**
             * Authorization Url
             * @description OAuth authorization endpoint URL (must be HTTPS)
             */
            authorization_url: string;
            /**
             * Token Url
             * @description OAuth token endpoint URL (must be HTTPS)
             */
            token_url: string;
            /**
             * Scopes
             * @description Comma-separated list of OAuth scopes to request
             * @default
             */
            scopes: string;
        };
        /**
         * UpdateOAuthConnectionRequest
         * @description Request model for updating an OAuth connection
         *     PUT /api/oauth/connections/{connection_name}
         */
        UpdateOAuthConnectionRequest: {
            /**
             * Client Id
             * @default null
             */
            client_id: string | null;
            /**
             * Client Secret
             * @default null
             */
            client_secret: string | null;
            /**
             * Authorization Url
             * @default null
             */
            authorization_url: string | null;
            /**
             * Token Url
             * @default null
             */
            token_url: string | null;
            /**
             * Scopes
             * @default null
             */
            scopes: string | null;
        };
        /**
         * OAuthConnectionSummary
         * @description Summary model for OAuth connections (used in list responses)
         *     GET /api/oauth/connections
         *
         *     Does not include sensitive fields or detailed configuration
         */
        OAuthConnectionSummary: {
            /** Connection Name */
            connection_name: string;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /**
             * Oauth Flow Type
             * @enum {string}
             */
            oauth_flow_type: "authorization_code" | "client_credentials" | "refresh_token";
            /**
             * Status
             * @enum {string}
             */
            status: "not_connected" | "waiting_callback" | "testing" | "completed" | "failed";
            /**
             * Status Message
             * @default null
             */
            status_message: string | null;
            /**
             * Expires At
             * @description When the current access token expires
             * @default null
             */
            expires_at: string | null;
            /**
             * Last Refresh At
             * @description Last successful token refresh
             * @default null
             */
            last_refresh_at: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * OAuthConnectionDetail
         * @description Detailed model for OAuth connections (used in get/update responses)
         *     GET /api/oauth/connections/{connection_name}
         *
         *     Includes configuration details but masks sensitive fields
         */
        OAuthConnectionDetail: {
            /** Connection Name */
            connection_name: string;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /**
             * Oauth Flow Type
             * @enum {string}
             */
            oauth_flow_type: "authorization_code" | "client_credentials" | "refresh_token";
            /**
             * Client Id
             * @description OAuth client ID (safe to expose)
             */
            client_id: string;
            /** Authorization Url */
            authorization_url: string;
            /** Token Url */
            token_url: string;
            /** Scopes */
            scopes: string;
            /**
             * Redirect Uri
             * @description Callback URL for OAuth authorization
             */
            redirect_uri: string;
            /**
             * Status
             * @enum {string}
             */
            status: "not_connected" | "waiting_callback" | "testing" | "completed" | "failed";
            /**
             * Status Message
             * @default null
             */
            status_message: string | null;
            /**
             * Expires At
             * @default null
             */
            expires_at: string | null;
            /**
             * Last Refresh At
             * @default null
             */
            last_refresh_at: string | null;
            /**
             * Last Test At
             * @default null
             */
            last_test_at: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Created By */
            created_by: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * OAuthConnection
         * @description Internal model representing full OAuth connection data
         *     Used for storage operations and business logic
         *
         *     Includes references to secrets (not the actual secret values)
         */
        OAuthConnection: {
            /**
             * Org Id
             * @description Organization ID or 'GLOBAL'
             */
            org_id: string;
            /** Connection Name */
            connection_name: string;
            /**
             * Description
             * @default null
             */
            description: string | null;
            /**
             * Oauth Flow Type
             * @enum {string}
             */
            oauth_flow_type: "authorization_code" | "client_credentials" | "refresh_token";
            /** Client Id */
            client_id: string;
            /**
             * Client Secret Ref
             * @description Reference to client secret in Config table (oauth_{name}_client_secret)
             */
            client_secret_ref: string;
            /**
             * Oauth Response Ref
             * @description Reference to OAuth response in Config table (oauth_{name}_oauth_response)
             */
            oauth_response_ref: string;
            /** Authorization Url */
            authorization_url: string;
            /** Token Url */
            token_url: string;
            /**
             * Scopes
             * @default
             */
            scopes: string;
            /**
             * Redirect Uri
             * @description Callback URL: /api/oauth/callback/{connection_name}
             */
            redirect_uri: string;
            /**
             * Token Type
             * @default Bearer
             */
            token_type: string;
            /**
             * Expires At
             * @description When the current access token expires (copied from secret for quick checks)
             * @default null
             */
            expires_at: string | null;
            /**
             * Status
             * @enum {string}
             */
            status: "not_connected" | "waiting_callback" | "testing" | "completed" | "failed";
            /**
             * Status Message
             * @default null
             */
            status_message: string | null;
            /**
             * Last Refresh At
             * @default null
             */
            last_refresh_at: string | null;
            /**
             * Last Test At
             * @default null
             */
            last_test_at: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** Created By */
            created_by: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
        };
        /**
         * OAuthCredentials
         * @description OAuth credentials model for workflow consumption
         *     GET /api/oauth/credentials/{connection_name}
         *
         *     Contains actual access token and refresh token for use in API calls
         *     This model is only exposed to authenticated workflow contexts
         */
        OAuthCredentials: {
            /**
             * Connection Name
             * @description Connection identifier
             */
            connection_name: string;
            /**
             * Access Token
             * @description Current OAuth access token
             */
            access_token: string;
            /**
             * Token Type
             * @description Token type (usually Bearer)
             * @default Bearer
             */
            token_type: string;
            /**
             * Expires At
             * @description ISO 8601 timestamp when token expires
             */
            expires_at: string;
            /**
             * Refresh Token
             * @description Refresh token if available
             * @default null
             */
            refresh_token: string | null;
            /**
             * Scopes
             * @description Space-separated list of granted scopes
             * @default
             */
            scopes: string;
        };
        /**
         * OAuthCredentialsResponse
         * @description Response wrapper for OAuth credentials endpoint
         *     Includes connection status and metadata
         */
        OAuthCredentialsResponse: {
            /** Connection Name */
            connection_name: string;
            /**
             * @description Credentials if connection is active, None if not connected
             * @default null
             */
            credentials: components["schemas"]["OAuthCredentials"] | null;
            /**
             * Status
             * @description Current connection status
             * @enum {string}
             */
            status: "not_connected" | "waiting_callback" | "testing" | "completed" | "failed";
            /**
             * Expires At
             * @description ISO 8601 timestamp when token expires
             * @default null
             */
            expires_at: string | null;
        };
        /**
         * DataProviderListResponse
         * @description Response model for listing data providers
         */
        DataProviderListResponse: {
            /** Providers */
            providers: components["schemas"]["DataProviderMetadata"][];
        };
    };
    responses: {
        /** @description Bad request */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Forbidden */
        ForbiddenError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Internal server error */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    execute_workflow_endpoint_test_workflow_get: {
        parameters: {
            query: {
                /** @description Name to greet */
                name: string;
                /** @description Number of times to greet */
                count?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Workflow executed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        executionId?: string;
                        status?: string;
                        result?: Record<string, never>;
                        durationMs?: number;
                        /** Format: date-time */
                        startedAt?: string;
                        /** Format: date-time */
                        completedAt?: string;
                    };
                };
            };
            /** @description Bad request (invalid input or validation errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized (invalid or missing API key) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found or not enabled */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed (only GET, POST allowed for this endpoint) */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    execute_workflow_endpoint_test_workflow_post: {
        parameters: {
            query: {
                /** @description Name to greet */
                name: string;
                /** @description Number of times to greet */
                count?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    name: string;
                    count?: number;
                };
            };
        };
        responses: {
            /** @description Workflow executed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        executionId?: string;
                        status?: string;
                        result?: Record<string, never>;
                        durationMs?: number;
                        /** Format: date-time */
                        startedAt?: string;
                        /** Format: date-time */
                        completedAt?: string;
                    };
                };
            };
            /** @description Bad request (invalid input or validation errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized (invalid or missing API key) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found or not enabled */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed (only GET, POST allowed for this endpoint) */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    execute_workflow_endpoint_webhook_example_post: {
        parameters: {
            query: {
                /** @description Type of webhook event */
                event_type: string;
                /** @description Event payload data */
                payload?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    event_type: string;
                    payload?: string;
                };
            };
        };
        responses: {
            /** @description Workflow executed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        executionId?: string;
                        status?: string;
                        result?: Record<string, never>;
                        durationMs?: number;
                        /** Format: date-time */
                        startedAt?: string;
                        /** Format: date-time */
                        completedAt?: string;
                    };
                };
            };
            /** @description Bad request (invalid input or validation errors) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized (invalid or missing API key) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found or not enabled */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method not allowed (only POST allowed for this endpoint) */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
