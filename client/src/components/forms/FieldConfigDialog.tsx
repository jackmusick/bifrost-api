import { useEffect, useState } from 'react'
import Editor from '@monaco-editor/react'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Badge } from '@/components/ui/badge'
import { Checkbox } from '@/components/ui/checkbox'
import { ExpressionEditor, validateExpression } from '@/components/ui/expression-editor'
import { ContextViewer } from '@/components/ui/context-viewer'
import { Loader2, AlertCircle, PanelRightOpen, X } from 'lucide-react'
import { Alert, AlertDescription } from '@/components/ui/alert'
import type { components } from '@/lib/v1'
type FormField = components['schemas']['FormField']
type FormFieldType = components['schemas']['FormFieldType']

import { dataProvidersService, type DataProvider } from '@/services/dataProviders'
import { useQuery } from '@tanstack/react-query'
import { OptionsEditor } from './OptionsEditor'

interface FieldConfigDialogProps {
  field?: FormField | undefined
  open: boolean
  onClose: () => void
  onSave: (field: FormField) => void
  defaultType?: string
  workflowInputData?: {
    name: string
    required: boolean
    helpText?: string
    dataProvider?: string
  }
  isWorkflowInput?: boolean
  allFieldNames?: string[]
  previewContext?: {
    workflow: Record<string, unknown>
    query: Record<string, string>
    field: Record<string, unknown>
  }
}

export function FieldConfigDialog({ field, open, onClose, onSave, defaultType, workflowInputData, isWorkflowInput, allFieldNames = [], previewContext }: FieldConfigDialogProps) {
  const [name, setName] = useState('')
  const [label, setLabel] = useState('')
  const [type, setType] = useState<FormFieldType>('text')
  const [required, setRequired] = useState(false)
  const [placeholder, setPlaceholder] = useState('')
  const [helpText, setHelpText] = useState('')
  const [defaultValue, setDefaultValue] = useState('')
  const [dataProvider, setDataProvider] = useState<string | undefined>(undefined)
  const [labelWasAutoGenerated, setLabelWasAutoGenerated] = useState(false)

  // NEW MVP field states
  const [visibilityExpression, setVisibilityExpression] = useState('')
  const [content, setContent] = useState('') // For markdown/html
  const [options, setOptions] = useState<Array<{ label: string; value: string }>>([]) // Array of option objects
  const [allowedTypes, setAllowedTypes] = useState('') // Comma-separated MIME types
  const [multiple, setMultiple] = useState(false)
  const [maxSizeMB, setMaxSizeMB] = useState('')
  const [allowAsQueryParam, setAllowAsQueryParam] = useState(false)
  const [expressionValidationError, setExpressionValidationError] = useState<string | null>(null)
  const [showContextSidebar, setShowContextSidebar] = useState(false)

  // Fetch data providers from separate endpoint
  const { data: dataProvidersResponse, isLoading: isLoadingDataProviders } = useQuery({
    queryKey: ['data-providers'],
    queryFn: () => dataProvidersService.getAllProviders(),
    staleTime: 10 * 60 * 1000, // 10 minutes
  })
  const dataProviders = dataProvidersResponse?.providers || []

  // Helper function to generate a nice label from field name
  const generateLabelFromName = (fieldName: string): string => {
    return fieldName
      .replace(/_/g, ' ')
      .replace(/\b\w/g, l => l.toUpperCase())
  }

  useEffect(() => {
    if (field) {
      // Editing existing field
      setName(field.name)
      setLabel(field.label)
      setType(field.type)
      setRequired(field.required)
      setPlaceholder(field.placeholder ?? '')
      setHelpText(field.helpText ?? '')
      setDefaultValue(field.defaultValue as string ?? '')
      setDataProvider(field.dataProvider ?? undefined)
      setLabelWasAutoGenerated(false)

      // NEW MVP fields
      setVisibilityExpression(field.visibilityExpression ?? '')
      setContent(field.content ?? '')
      setOptions((field.options as Array<{ label: string; value: string }>) || [])
      setAllowedTypes(field.allowedTypes?.join(', ') ?? '')
      setMultiple(field.multiple ?? false)
      setMaxSizeMB(field.maxSizeMB?.toString() ?? '')
      setAllowAsQueryParam(field.allowAsQueryParam ?? false)
    } else if (workflowInputData) {
      // Pre-fill from workflow input - name is readonly
      const suggestedLabel = generateLabelFromName(workflowInputData.name)
      setName(workflowInputData.name)
      setLabel(suggestedLabel)
      setType((defaultType as FormFieldType) || 'text')
      setRequired(workflowInputData.required)
      setPlaceholder('')
      setHelpText(workflowInputData.helpText || '')
      setDefaultValue('')
      setDataProvider(workflowInputData.dataProvider)
      setLabelWasAutoGenerated(true)
      // Reset MVP fields
      setVisibilityExpression('')
      setContent('')
      setOptions([])
      setAllowedTypes('')
      setMultiple(false)
      setMaxSizeMB('')
      setAllowAsQueryParam(false)
    } else {
      // Reset for new field
      setName('')
      setLabel('')
      setType((defaultType as FormFieldType) || 'text')
      setRequired(false)
      setPlaceholder('')
      setHelpText('')
      setDefaultValue('')
      setDataProvider(undefined)
      setLabelWasAutoGenerated(false)
      // Reset MVP fields
      setVisibilityExpression('')
      setContent('')
      setOptions([])
      setAllowedTypes('')
      setMultiple(false)
      setMaxSizeMB('')
      setAllowAsQueryParam(false)
    }
  }, [field, open, defaultType, workflowInputData])

  // Validate field name follows Python variable conventions
  const validateFieldName = (value: string): boolean => {
    // Must start with letter or underscore
    // Can contain letters, numbers, underscores
    // Cannot be a Python keyword
    const pythonKeywords = [
      'False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break',
      'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally',
      'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal',
      'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'
    ]

    // Check regex pattern
    const validPattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/
    if (!validPattern.test(value)) {
      return false
    }

    // Check if it's a Python keyword
    if (pythonKeywords.includes(value)) {
      return false
    }

    return true
  }

  const handleFieldNameChange = (value: string) => {
    // Convert spaces to underscores automatically
    const sanitized = value.replace(/\s+/g, '_').toLowerCase()
    setName(sanitized)

    // Auto-generate label if it was previously auto-generated or empty
    if (labelWasAutoGenerated || label === '' || label === generateLabelFromName(name)) {
      setLabel(generateLabelFromName(sanitized))
      setLabelWasAutoGenerated(true)
    }
  }

  const handleLabelChange = (value: string) => {
    setLabel(value)
    // Mark that the user manually edited the label
    setLabelWasAutoGenerated(false)
  }

  const isFieldNameValid = name === '' || validateFieldName(name)

  const handleSave = () => {
    if (!isFieldNameValid) {
      return
    }

    // Validate visibility expression if provided
    if (visibilityExpression.trim()) {
      const validation = validateExpression(visibilityExpression)
      if (!validation.isValid) {
        setExpressionValidationError(validation.error || 'Invalid expression')
        return
      }
    }
    setExpressionValidationError(null)

    // Filter out empty options (both label and value must have content)
    const filteredOptions = options.filter(opt => opt.label.trim() && opt.value.trim())
    const parsedOptions = filteredOptions.length > 0 ? filteredOptions : null

    // Parse allowed types if provided
    const parsedAllowedTypes = allowedTypes.trim()
      ? allowedTypes.split(',').map(t => t.trim()).filter(Boolean)
      : null

    // Parse max size
    const parsedMaxSize = maxSizeMB.trim() ? parseInt(maxSizeMB) : null

    const newField: FormField = {
      name,
      label,
      type,
      required,
      validation: null,
      dataProvider: dataProvider ?? null,
      defaultValue: defaultValue || null,
      placeholder: placeholder || null,
      helpText: helpText || null,
      // NEW MVP fields
      visibilityExpression: visibilityExpression.trim() || null,
      content: content.trim() || null,
      options: parsedOptions,
      allowedTypes: parsedAllowedTypes,
      multiple: type === 'file' ? multiple : null,
      maxSizeMB: parsedMaxSize,
      allowAsQueryParam: allowAsQueryParam || null,
    }
    onSave(newField)
  }

  const isSaveDisabled = !name || !label || !isFieldNameValid

  // Use provided preview context or fall back to default examples
  const displayContext = previewContext || {
    workflow: {
      user_id: 'user-123',
      user_email: 'user@example.com',
      organization_id: null,
    },
    query: {},
    field: {},
  }

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[1200px] max-h-[90vh] overflow-hidden p-0">
        <div className="flex h-full max-h-[90vh]">
          {/* Main content area */}
          <div className="flex-1 overflow-y-auto p-6">
            <DialogHeader>
              <div className="flex items-center justify-between">
                <div>
                  <DialogTitle>{field ? 'Edit Field' : 'Add Field'}</DialogTitle>
                  <DialogDescription>
                    Configure the field properties and validation
                  </DialogDescription>
                </div>
                {/* Context toggle button - only visible on small screens */}
                <Button
                  variant="outline"
                  size="sm"
                  className="lg:hidden"
                  onClick={() => setShowContextSidebar(true)}
                >
                  <PanelRightOpen className="h-4 w-4 mr-2" />
                  Context
                </Button>
              </div>
            </DialogHeader>

            {expressionValidationError && (
              <Alert variant="destructive" className="mt-4">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>
                  <strong>Invalid Visibility Expression:</strong> {expressionValidationError}
                </AlertDescription>
              </Alert>
            )}

            {/* Field configuration form */}
            <div className="mt-6 space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="fieldName">
                Field Name *
                {isWorkflowInput && (
                  <Badge variant="secondary" className="ml-2 text-xs">
                    From Workflow
                  </Badge>
                )}
              </Label>
              <Input
                id="fieldName"
                placeholder="first_name"
                value={name}
                onChange={(e) => handleFieldNameChange(e.target.value)}
                className={`font-mono ${!isFieldNameValid ? 'border-destructive' : ''}`}
                readOnly={isWorkflowInput}
                disabled={isWorkflowInput}
              />
              {!isFieldNameValid && name !== '' ? (
                <p className="text-xs text-destructive">
                  Must start with letter/underscore, contain only letters/numbers/underscores, and not be a Python keyword
                </p>
              ) : isWorkflowInput ? (
                <p className="text-xs text-muted-foreground">
                  This field name is defined by the workflow and cannot be changed
                </p>
              ) : (
                <p className="text-xs text-muted-foreground">
                  Used as the parameter name (spaces converted to underscores)
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="fieldLabel">
                Label *
                {labelWasAutoGenerated && (
                  <span className="ml-2 text-xs font-normal text-muted-foreground">
                    (auto-generated)
                  </span>
                )}
              </Label>
              <Input
                id="fieldLabel"
                placeholder="First Name"
                value={label}
                onChange={(e) => handleLabelChange(e.target.value)}
              />
              <p className="text-xs text-muted-foreground">
                Displayed to the user{labelWasAutoGenerated && ' - edit to customize'}
              </p>
            </div>
          </div>

          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="fieldType">Field Type</Label>
                <Select value={type} onValueChange={(v) => setType(v as FormFieldType)}>
                  <SelectTrigger id="fieldType">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="text">Text</SelectItem>
                    <SelectItem value="email">Email</SelectItem>
                    <SelectItem value="number">Number</SelectItem>
                    <SelectItem value="select">Select (Dropdown)</SelectItem>
                    <SelectItem value="checkbox">Checkbox</SelectItem>
                    <SelectItem value="textarea">Textarea</SelectItem>
                    <SelectItem value="radio">Radio Buttons</SelectItem>
                    <SelectItem value="datetime">Date & Time</SelectItem>
                    <SelectItem value="markdown">Markdown Content</SelectItem>
                    <SelectItem value="html">HTML Content</SelectItem>
                    <SelectItem value="file">File Upload</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label>Required</Label>
                <div className="flex gap-2 pt-2">
                  <button
                    type="button"
                    onClick={() => setRequired(true)}
                    className={`rounded-lg border px-4 py-2 text-sm transition-colors ${
                      required
                        ? 'border-primary bg-primary/5 text-primary'
                        : 'border-border hover:bg-accent'
                    }`}
                  >
                    <Badge variant={required ? 'destructive' : 'outline'}>Required</Badge>
                  </button>
                  <button
                    type="button"
                    onClick={() => setRequired(false)}
                    className={`rounded-lg border px-4 py-2 text-sm transition-colors ${
                      !required
                        ? 'border-primary bg-primary/5 text-primary'
                        : 'border-border hover:bg-accent'
                    }`}
                  >
                    <Badge variant={!required ? 'default' : 'outline'}>Optional</Badge>
                  </button>
                </div>
              </div>
            </div>

            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="allowAsQueryParam"
                  checked={allowAsQueryParam}
                  onCheckedChange={(checked) => setAllowAsQueryParam(checked as boolean)}
                />
                <Label htmlFor="allowAsQueryParam" className="cursor-pointer">
                  Allow as Query Parameter
                </Label>
              </div>
              <p className="text-xs text-muted-foreground">
                When enabled, this field's value can be pre-filled from URL query parameters (e.g., ?{name}=value)
              </p>
            </div>

            {(isWorkflowInput || type === 'select' || dataProvider) && (
              <div className="space-y-2">
                <Label htmlFor="dataProvider">Data Provider (Optional)</Label>
                <Select
                  value={dataProvider || '__none__'}
                  onValueChange={(v) => setDataProvider(v === '__none__' ? undefined : v)}
                  disabled={isLoadingDataProviders}
                >
                  <SelectTrigger id="dataProvider">
                    <SelectValue placeholder={
                      isLoadingDataProviders ? 'Loading providers...' : 'Select a data provider...'
                    } />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="__none__">None (Static options)</SelectItem>
                    {isLoadingDataProviders ? (
                      <div className="flex items-center justify-center p-2 text-sm text-muted-foreground">
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Loading...
                      </div>
                    ) : dataProviders.length > 0 ? (
                      dataProviders.map((provider: DataProvider) => (
                        <SelectItem key={provider.name} value={provider.name}>
                          <div className="flex flex-col">
                            <span className="font-mono text-sm">{provider.name}</span>
                            <span className="text-xs text-muted-foreground">{provider.description}</span>
                          </div>
                        </SelectItem>
                      ))
                    ) : (
                      <SelectItem value="__no_providers__" disabled>
                        No data providers available
                      </SelectItem>
                    )}
                  </SelectContent>
                </Select>
                {isWorkflowInput ? (
                  <p className="text-xs text-muted-foreground">
                    Workflow inputs can use data providers with any field type
                  </p>
                ) : (
                  <p className="text-xs text-muted-foreground">
                    Data provider to populate dropdown options dynamically
                  </p>
                )}
              </div>
            )}
          </div>

          {/* Hide placeholder, default value, and help text for markdown/html content types */}
          {type !== 'markdown' && type !== 'html' && (
            <>
              <div className="space-y-2">
                <Label htmlFor="defaultValue">Default Value</Label>
                <Input
                  id="defaultValue"
                  placeholder="Optional default value..."
                  value={defaultValue}
                  onChange={(e) => setDefaultValue(e.target.value)}
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="placeholder">Placeholder</Label>
                  <Input
                    id="placeholder"
                    placeholder="Enter a placeholder..."
                    value={placeholder}
                    onChange={(e) => setPlaceholder(e.target.value)}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="helpText">Help Text</Label>
                  <Input
                    id="helpText"
                    placeholder="Additional help text..."
                    value={helpText}
                    onChange={(e) => setHelpText(e.target.value)}
                  />
                </div>
              </div>
            </>
          )}

          {/* Visibility Expression */}
          <ExpressionEditor
            label="Visibility Expression (Optional)"
            value={visibilityExpression}
            onChange={setVisibilityExpression}
            exampleFieldName={name || 'field_name'}
          />

          {/* Content field for Markdown/HTML types */}
          {type === 'markdown' && (
            <div className="space-y-2">
              <Label htmlFor="content">Markdown Content</Label>
              <Textarea
                id="content"
                placeholder="# Heading\n\nYour markdown content..."
                value={content}
                onChange={(e) => setContent(e.target.value)}
                className="font-mono text-sm"
                rows={6}
              />
              <p className="text-xs text-muted-foreground">
                Static markdown content to display in the form
              </p>
            </div>
          )}

          {/* Monaco Editor for HTML/JSX */}
          {type === 'html' && (
            <div className="space-y-2">
              <Label htmlFor="content">HTML/JSX Template</Label>
              <div className="border rounded-md overflow-hidden">
                <div className="px-3">
                  <Editor
                  height="120px"
                  defaultLanguage="html"
                  language="html"
                  value={content}
                  onChange={(value) => setContent(value || '')}
                  theme="vs-dark"
                  options={{
                    minimap: { enabled: false },
                    fontSize: 13,
                    lineNumbers: 'on',
                    scrollBeyondLastLine: false,
                    wordWrap: 'on',
                    tabSize: 2,
                    formatOnPaste: true,
                    formatOnType: true,
                    padding: { top: 8, bottom: 8 },
                  }}
                />
                </div>
              </div>
            </div>
          )}

          {/* Options for Radio and Select (dropdown) types */}
          {(type === 'radio' || (type === 'select' && !dataProvider)) && (
            <OptionsEditor
              options={options}
              onChange={setOptions}
              label={type === 'radio' ? 'Radio Options' : 'Dropdown Options'}
              helpText="Add options for users to choose from. Label is what users see, value is what gets stored."
            />
          )}

          {/* File upload configuration */}
          {type === 'file' && (
            <>
              <div className="space-y-2">
                <Label htmlFor="allowedTypes">Allowed File Types (Optional)</Label>
                <Input
                  id="allowedTypes"
                  placeholder="image/png, image/jpeg, application/pdf"
                  value={allowedTypes}
                  onChange={(e) => setAllowedTypes(e.target.value)}
                  className="font-mono text-sm"
                />
                <p className="text-xs text-muted-foreground">
                  Comma-separated MIME types. Leave empty to allow all file types.
                </p>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="maxSizeMB">Max File Size (MB)</Label>
                  <Input
                    id="maxSizeMB"
                    type="number"
                    placeholder="10"
                    value={maxSizeMB}
                    onChange={(e) => setMaxSizeMB(e.target.value)}
                    min="1"
                  />
                </div>

                <div className="space-y-2">
                  <Label>Multiple Files</Label>
                  <div className="flex gap-2 pt-2">
                    <button
                      type="button"
                      onClick={() => setMultiple(true)}
                      className={`flex-1 rounded-lg border px-4 py-2 text-sm transition-colors ${
                        multiple
                          ? 'border-primary bg-primary/5 text-primary'
                          : 'border-border hover:bg-accent'
                      }`}
                    >
                      Yes
                    </button>
                    <button
                      type="button"
                      onClick={() => setMultiple(false)}
                      className={`flex-1 rounded-lg border px-4 py-2 text-sm transition-colors ${
                        !multiple
                          ? 'border-primary bg-primary/5 text-primary'
                          : 'border-border hover:bg-accent'
                      }`}
                    >
                      No
                    </button>
                  </div>
                </div>
              </div>
            </>
          )}
            </div>

            <DialogFooter className="mt-6">
              <Button type="button" variant="outline" onClick={onClose}>
                Cancel
              </Button>
              <Button onClick={handleSave} disabled={isSaveDisabled}>
                {field ? 'Update Field' : 'Add Field'}
              </Button>
            </DialogFooter>
          </div>

          {/* Right sidebar: Context viewer - always visible on lg+ screens */}
          <div className="hidden lg:flex lg:w-80 xl:w-96 border-l bg-muted/30 flex-col">
            <div className="p-4 border-b bg-background">
              <h3 className="text-sm font-semibold">Context & Helpers</h3>
              <p className="text-xs text-muted-foreground mt-1">
                Tools and context for building dynamic forms
              </p>
            </div>
            <div className="flex-1 overflow-y-auto p-4 space-y-6">
              {/* Visibility Expression Help */}
              <div className="space-y-2">
                <h4 className="text-sm font-semibold">Visibility Expression</h4>
                <p className="text-xs text-muted-foreground">
                  Control when this field appears based on other field values or context.
                </p>
                <div className="space-y-2">
                  <p className="text-xs font-medium">Examples:</p>
                  <div className="space-y-2">
                    <div>
                      <code className="block bg-muted p-2 rounded text-xs">
                        context.field.country === "US"
                      </code>
                      <p className="text-xs text-muted-foreground mt-1">Show only if country is US</p>
                    </div>
                    <div>
                      <code className="block bg-muted p-2 rounded text-xs">
                        context.field.age &gt;= 18
                      </code>
                      <p className="text-xs text-muted-foreground mt-1">Show only if age 18 or older</p>
                    </div>
                    <div>
                      <code className="block bg-muted p-2 rounded text-xs">
                        context.workflow.is_admin === true
                      </code>
                      <p className="text-xs text-muted-foreground mt-1">Show only for admin users</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* HTML/JSX Examples - only show when HTML type is selected */}
              {type === 'html' && (
                <div className="space-y-2">
                  <h4 className="text-sm font-semibold">JSX Template Examples</h4>
                  <div className="space-y-3">
                    <div>
                      <p className="text-xs text-muted-foreground mb-2">Basic usage:</p>
                      <code className="block bg-muted p-2 rounded text-xs">
                        {'<div>\n  <p>User: {context.workflow.user_email}</p>\n</div>'}
                      </code>
                    </div>
                    <div>
                      <p className="text-xs text-muted-foreground mb-2">Mapping arrays:</p>
                      <code className="block bg-muted p-2 rounded text-xs">
                        {'{context.workflow.items?.map((item, i) =>\n  <div key={i}>{item.name}</div>\n)}'}
                      </code>
                    </div>
                    <div>
                      <p className="text-xs text-muted-foreground mb-2">Use className for styling:</p>
                      <code className="block bg-muted p-2 rounded text-xs">
                        {'<div className="text-lg font-bold">\n  Content\n</div>'}
                      </code>
                    </div>
                  </div>
                </div>
              )}

              {/* Available Context */}
              <div className="space-y-2">
                <h4 className="text-sm font-semibold">Available Context</h4>
                <p className="text-xs text-muted-foreground">
                  Preview based on your current session. Actual runtime values may differ.
                </p>
                <ContextViewer
                  context={displayContext}
                  maxHeight="none"
                  fieldNames={allFieldNames}
                />
              </div>
            </div>
          </div>

          {/* Mobile/tablet slideout sidebar */}
          {showContextSidebar && (
            <>
              {/* Backdrop */}
              <div
                className="lg:hidden fixed inset-0 bg-black/50 z-50"
                onClick={() => setShowContextSidebar(false)}
              />
              {/* Slideout panel */}
              <div className="lg:hidden fixed right-0 top-0 bottom-0 w-80 bg-background border-l z-50 flex flex-col shadow-xl">
                <div className="p-4 border-b flex items-center justify-between">
                  <div>
                    <h3 className="text-sm font-semibold">Context & Helpers</h3>
                    <p className="text-xs text-muted-foreground mt-1">
                      Tools and context for building forms
                    </p>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowContextSidebar(false)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
                <div className="flex-1 overflow-y-auto p-4 space-y-6">
                  {/* Visibility Expression Help */}
                  <div className="space-y-2">
                    <h4 className="text-sm font-semibold">Visibility Expression</h4>
                    <p className="text-xs text-muted-foreground">
                      Control when this field appears based on other field values or context.
                    </p>
                    <div className="space-y-2">
                      <p className="text-xs font-medium">Examples:</p>
                      <div className="space-y-2">
                        <div>
                          <code className="block bg-muted p-2 rounded text-xs">
                            context.field.country === "US"
                          </code>
                          <p className="text-xs text-muted-foreground mt-1">Show only if country is US</p>
                        </div>
                        <div>
                          <code className="block bg-muted p-2 rounded text-xs">
                            context.field.age &gt;= 18
                          </code>
                          <p className="text-xs text-muted-foreground mt-1">Show only if age 18 or older</p>
                        </div>
                        <div>
                          <code className="block bg-muted p-2 rounded text-xs">
                            context.workflow.is_admin === true
                          </code>
                          <p className="text-xs text-muted-foreground mt-1">Show only for admin users</p>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* HTML/JSX Examples */}
                  {type === 'html' && (
                    <div className="space-y-2">
                      <h4 className="text-sm font-semibold">JSX Template Examples</h4>
                      <div className="space-y-3">
                        <div>
                          <p className="text-xs text-muted-foreground mb-2">Basic usage:</p>
                          <code className="block bg-muted p-2 rounded text-xs">
                            {'<div>\n  <p>User: {context.workflow.user_email}</p>\n</div>'}
                          </code>
                        </div>
                        <div>
                          <p className="text-xs text-muted-foreground mb-2">Mapping arrays:</p>
                          <code className="block bg-muted p-2 rounded text-xs">
                            {'{context.workflow.items?.map((item, i) =>\n  <div key={i}>{item.name}</div>\n)}'}
                          </code>
                        </div>
                        <div>
                          <p className="text-xs text-muted-foreground mb-2">Use className for styling:</p>
                          <code className="block bg-muted p-2 rounded text-xs">
                            {'<div className="text-lg font-bold">\n  Content\n</div>'}
                          </code>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Available Context */}
                  <div className="space-y-2">
                    <h4 className="text-sm font-semibold">Available Context</h4>
                    <p className="text-xs text-muted-foreground">
                      Preview based on your current session.
                    </p>
                    <ContextViewer
                      context={displayContext}
                      maxHeight="none"
                      fieldNames={allFieldNames}
                    />
                  </div>
                </div>
              </div>
            </>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
}
