import { useEffect, useState } from 'react'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Badge } from '@/components/ui/badge'
import { Loader2 } from 'lucide-react'
import type { components } from '@/lib/v1'
type FormField = components['schemas']['FormField']
type FormFieldType = components['schemas']['FormFieldType']

import { dataProvidersService, type DataProvider } from '@/services/dataProviders'
import { useQuery } from '@tanstack/react-query'

interface FieldConfigDialogProps {
  field?: FormField | undefined
  open: boolean
  onClose: () => void
  onSave: (field: FormField) => void
  defaultType?: string
  workflowInputData?: {
    name: string
    required: boolean
    helpText?: string
    dataProvider?: string
  }
  isWorkflowInput?: boolean
}

export function FieldConfigDialog({ field, open, onClose, onSave, defaultType, workflowInputData, isWorkflowInput }: FieldConfigDialogProps) {
  const [name, setName] = useState('')
  const [label, setLabel] = useState('')
  const [type, setType] = useState<FormFieldType>('text')
  const [required, setRequired] = useState(false)
  const [placeholder, setPlaceholder] = useState('')
  const [helpText, setHelpText] = useState('')
  const [defaultValue, setDefaultValue] = useState('')
  const [dataProvider, setDataProvider] = useState<string | undefined>(undefined)
  const [labelWasAutoGenerated, setLabelWasAutoGenerated] = useState(false)

  // Fetch data providers from separate endpoint
  const { data: dataProvidersResponse, isLoading: isLoadingDataProviders } = useQuery({
    queryKey: ['data-providers'],
    queryFn: () => dataProvidersService.getAllProviders(),
    staleTime: 10 * 60 * 1000, // 10 minutes
  })
  const dataProviders = dataProvidersResponse?.providers || []

  // Helper function to generate a nice label from field name
  const generateLabelFromName = (fieldName: string): string => {
    return fieldName
      .replace(/_/g, ' ')
      .replace(/\b\w/g, l => l.toUpperCase())
  }

  useEffect(() => {
    if (field) {
      // Editing existing field
      setName(field.name)
      setLabel(field.label)
      setType(field.type)
      setRequired(field.required)
      setPlaceholder(field.placeholder ?? '')
      setHelpText(field.helpText ?? '')
      setDefaultValue(field.defaultValue as string ?? '')
      setDataProvider(field.dataProvider ?? undefined)
      setLabelWasAutoGenerated(false)
    } else if (workflowInputData) {
      // Pre-fill from workflow input - name is readonly
      const suggestedLabel = generateLabelFromName(workflowInputData.name)
      setName(workflowInputData.name)
      setLabel(suggestedLabel)
      setType((defaultType as FormFieldType) || 'text')
      setRequired(workflowInputData.required)
      setPlaceholder('')
      setHelpText(workflowInputData.helpText || '')
      setDefaultValue('')
      setDataProvider(workflowInputData.dataProvider)
      setLabelWasAutoGenerated(true)
    } else {
      // Reset for new field
      setName('')
      setLabel('')
      setType((defaultType as FormFieldType) || 'text')
      setRequired(false)
      setPlaceholder('')
      setHelpText('')
      setDefaultValue('')
      setDataProvider(undefined)
      setLabelWasAutoGenerated(false)
    }
  }, [field, open, defaultType, workflowInputData])

  // Validate field name follows Python variable conventions
  const validateFieldName = (value: string): boolean => {
    // Must start with letter or underscore
    // Can contain letters, numbers, underscores
    // Cannot be a Python keyword
    const pythonKeywords = [
      'False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break',
      'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally',
      'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal',
      'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'
    ]

    // Check regex pattern
    const validPattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/
    if (!validPattern.test(value)) {
      return false
    }

    // Check if it's a Python keyword
    if (pythonKeywords.includes(value)) {
      return false
    }

    return true
  }

  const handleFieldNameChange = (value: string) => {
    // Convert spaces to underscores automatically
    const sanitized = value.replace(/\s+/g, '_').toLowerCase()
    setName(sanitized)

    // Auto-generate label if it was previously auto-generated or empty
    if (labelWasAutoGenerated || label === '' || label === generateLabelFromName(name)) {
      setLabel(generateLabelFromName(sanitized))
      setLabelWasAutoGenerated(true)
    }
  }

  const handleLabelChange = (value: string) => {
    setLabel(value)
    // Mark that the user manually edited the label
    setLabelWasAutoGenerated(false)
  }

  const isFieldNameValid = name === '' || validateFieldName(name)

  const handleSave = () => {
    if (!isFieldNameValid) {
      return
    }

    const newField: FormField = {
      name,
      label,
      type,
      required,
      validation: null,
      dataProvider: dataProvider ?? null,
      defaultValue: defaultValue || null,
      placeholder: placeholder || null,
      helpText: helpText || null,
    }
    onSave(newField)
  }

  const isSaveDisabled = !name || !label || !isFieldNameValid

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>{field ? 'Edit Field' : 'Add Field'}</DialogTitle>
          <DialogDescription>
            Configure the field properties and validation
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="fieldName">
                Field Name *
                {isWorkflowInput && (
                  <Badge variant="secondary" className="ml-2 text-xs">
                    From Workflow
                  </Badge>
                )}
              </Label>
              <Input
                id="fieldName"
                placeholder="first_name"
                value={name}
                onChange={(e) => handleFieldNameChange(e.target.value)}
                className={`font-mono ${!isFieldNameValid ? 'border-destructive' : ''}`}
                readOnly={isWorkflowInput}
                disabled={isWorkflowInput}
              />
              {!isFieldNameValid && name !== '' ? (
                <p className="text-xs text-destructive">
                  Must start with letter/underscore, contain only letters/numbers/underscores, and not be a Python keyword
                </p>
              ) : isWorkflowInput ? (
                <p className="text-xs text-muted-foreground">
                  This field name is defined by the workflow and cannot be changed
                </p>
              ) : (
                <p className="text-xs text-muted-foreground">
                  Used as the parameter name (spaces converted to underscores)
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="fieldLabel">
                Label *
                {labelWasAutoGenerated && (
                  <span className="ml-2 text-xs font-normal text-muted-foreground">
                    (auto-generated)
                  </span>
                )}
              </Label>
              <Input
                id="fieldLabel"
                placeholder="First Name"
                value={label}
                onChange={(e) => handleLabelChange(e.target.value)}
              />
              <p className="text-xs text-muted-foreground">
                Displayed to the user{labelWasAutoGenerated && ' - edit to customize'}
              </p>
            </div>
          </div>

          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="fieldType">Field Type</Label>
                <Select value={type} onValueChange={(v) => setType(v as FormFieldType)}>
                  <SelectTrigger id="fieldType">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="text">Text</SelectItem>
                    <SelectItem value="email">Email</SelectItem>
                    <SelectItem value="number">Number</SelectItem>
                    <SelectItem value="select">Select (Dropdown)</SelectItem>
                    <SelectItem value="checkbox">Checkbox</SelectItem>
                    <SelectItem value="textarea">Textarea</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label>Required</Label>
                <div className="flex gap-2 pt-2">
                  <button
                    onClick={() => setRequired(true)}
                    className={`rounded-lg border px-4 py-2 text-sm transition-colors ${
                      required
                        ? 'border-primary bg-primary/5 text-primary'
                        : 'border-border hover:bg-accent'
                    }`}
                  >
                    <Badge variant={required ? 'destructive' : 'outline'}>Required</Badge>
                  </button>
                  <button
                    onClick={() => setRequired(false)}
                    className={`rounded-lg border px-4 py-2 text-sm transition-colors ${
                      !required
                        ? 'border-primary bg-primary/5 text-primary'
                        : 'border-border hover:bg-accent'
                    }`}
                  >
                    <Badge variant={!required ? 'default' : 'outline'}>Optional</Badge>
                  </button>
                </div>
              </div>
            </div>

            {(isWorkflowInput || type === 'select' || dataProvider) && (
              <div className="space-y-2">
                <Label htmlFor="dataProvider">Data Provider (Optional)</Label>
                <Select
                  value={dataProvider || '__none__'}
                  onValueChange={(v) => setDataProvider(v === '__none__' ? undefined : v)}
                  disabled={isLoadingDataProviders}
                >
                  <SelectTrigger id="dataProvider">
                    <SelectValue placeholder={
                      isLoadingDataProviders ? 'Loading providers...' : 'Select a data provider...'
                    } />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="__none__">None (Static options)</SelectItem>
                    {isLoadingDataProviders ? (
                      <div className="flex items-center justify-center p-2 text-sm text-muted-foreground">
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Loading...
                      </div>
                    ) : dataProviders.length > 0 ? (
                      dataProviders.map((provider: DataProvider) => (
                        <SelectItem key={provider.name} value={provider.name}>
                          <div className="flex flex-col">
                            <span className="font-mono text-sm">{provider.name}</span>
                            <span className="text-xs text-muted-foreground">{provider.description}</span>
                          </div>
                        </SelectItem>
                      ))
                    ) : (
                      <SelectItem value="__no_providers__" disabled>
                        No data providers available
                      </SelectItem>
                    )}
                  </SelectContent>
                </Select>
                {isWorkflowInput ? (
                  <p className="text-xs text-muted-foreground">
                    Workflow inputs can use data providers with any field type
                  </p>
                ) : (
                  <p className="text-xs text-muted-foreground">
                    Data provider to populate dropdown options dynamically
                  </p>
                )}
              </div>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="placeholder">Placeholder</Label>
            <Input
              id="placeholder"
              placeholder="Enter a placeholder..."
              value={placeholder}
              onChange={(e) => setPlaceholder(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="defaultValue">Default Value</Label>
            <Input
              id="defaultValue"
              placeholder="Optional default value..."
              value={defaultValue}
              onChange={(e) => setDefaultValue(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="helpText">Help Text</Label>
            <Textarea
              id="helpText"
              placeholder="Additional help text for the user..."
              value={helpText}
              onChange={(e) => setHelpText(e.target.value)}
            />
          </div>
        </div>

        <DialogFooter>
          <Button type="button" variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button onClick={handleSave} disabled={isSaveDisabled}>
            {field ? 'Update Field' : 'Add Field'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
